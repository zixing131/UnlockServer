<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.Net.Bluetooth</name>
    </assembly>
    <members>
        <member name="T:InTheHand.Net.BluetoothAddress">
            <summary>
            Represents a Bluetooth device address.
            </summary>
        </member>
        <member name="F:InTheHand.Net.BluetoothAddress.None">
            <summary>
            Provides a null Bluetooth address.
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the BluetoothAddress class with the specified address.
            </summary>
            <param name="address">Int64 representation of the address.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the BluetoothAddress class with the specified address.
            </summary>
            <param name="address">UInt64 representation of the address.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the BluetoothAddress class with the specified address.
            </summary>
            <param name="addressBytes">Address as 6 byte array.</param>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Implicit(InTheHand.Net.BluetoothAddress)~System.UInt64">
            <summary>
            Defines an implicit conversion of a BluetoothAddress to a <see cref="T:System.UInt64"/>,
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Implicit(System.UInt64)~InTheHand.Net.BluetoothAddress">
            <summary>
            Defines an implicit conversion of a <see cref="T:System.UInt64"/> to a BluetoothAddress,
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToByteArray">
            <summary>
            Returns the value as a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToInt64">
            <summary>
            Returns the Bluetooth address as a long integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToUInt64">
            <summary>
            Returns the Bluetooth address as an unsigned long integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Equals(System.Object)">
            <summary>
            Compares two BluetoothAddress instances for equality.
            </summary>
            <param name="obj">The BluetoothAddress to compare with the current instance.</param>
            <returns>true if obj is a BluetoothAddress and equal to the current instance; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.CompareTo(InTheHand.Net.BluetoothAddress)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a String representation of the value of this BluetoothAddress instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this address. 
            The format parameter can be "N", "C", or "P". 
            If format is null or the empty string (""), "N" is used.</param>
            <param name="formatProvider">Ignored.</param>
            <returns>A String representation of the value of this BluetoothAddress.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString(System.String)">
            <summary>
            Returns a String representation of the value of this BluetoothAddress instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this address. 
            The format parameter can be "N", "C", or "P". 
            If format is null or the empty string (""), "N" is used.</param>
            <returns>A String representation of the value of this BluetoothAddress.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.ToString">
            <summary>
            Returns a default string representation of the BluetoothAddress.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.TryParse(System.String,InTheHand.Net.BluetoothAddress@)">
            <summary>
            Converts the string representation of an address to it's <see cref="T:InTheHand.Net.BluetoothAddress"/> equivalent.
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="bluetoothString">A string containing an address to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:InTheHand.Net.BluetoothAddress"/> equivalent to the address contained in s, if the conversion succeeded, or null (Nothing in Visual Basic) if the conversion failed.
            The conversion fails if the s parameter is null or is not of the correct format.</param>
            <returns>true if s is a valid Bluetooth address; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.Parse(System.String)">
            <summary>
            Converts the string representation of a Bluetooth address to a new <see cref="T:InTheHand.Net.BluetoothAddress"/> instance.
            </summary>
            <param name="bluetoothString">A string containing an address to convert.</param>
            <returns>New <see cref="T:InTheHand.Net.BluetoothAddress"/> instance.</returns>
            <remarks>Address must be specified in hex format optionally separated by the colon or period character e.g. 000000000000, 00:00:00:00:00:00 or 00.00.00.00.00.00.</remarks>
            <exception cref="T:System.ArgumentNullException">bluetoothString is null.</exception>
            <exception cref="T:System.FormatException">bluetoothString is not a valid Bluetooth address.</exception>
        </member>
        <member name="M:InTheHand.Net.BluetoothAddress.op_Inequality(InTheHand.Net.BluetoothAddress,InTheHand.Net.BluetoothAddress)">
            <summary>
            Returns an indication whether the values of two specified <see cref="T:InTheHand.Net.BluetoothAddress"/> objects are not equal.
            </summary>
            -
            <param name="x">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            <param name="y">A <see cref="T:InTheHand.Net.BluetoothAddress"/> or <see langword="null"/>.</param>
            -
            <returns><c>true</c> if the value of the two instance is different;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothClient">
            <summary>
            Provides client connections for Bluetooth Rfcomm network services.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.PairedDevices">
            <summary>
            Returns a collection of paired devices.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices">
            <summary>
            Discovers accessible Bluetooth devices, and returns their names and addresses.
            </summary>
            <returns>A collection of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32)">
            <summary>
            Discovers accessible Bluetooth devices, and returns their names and addresses.
            </summary>
            <returns>A collection of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Connects the client to a remote Bluetooth host using the specified Bluetooth address and service identifier.
            </summary>
            <param name="address">The BluetoothAddress of the remote host.</param>
            <param name="service">The Service Class Id of the service on the remote host.
            The standard Bluetooth service classes are provided on <see cref="T:InTheHand.Net.Bluetooth.BluetoothService"/>.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Close">
            <summary>
            Closes the BluetoothClient and the underlying connection.
            </summary>
            <remarks>The Close method marks the instance as disposed and requests that the associated Socket close the Bluetooth connection</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Authenticate">
            <summary>
            Sets whether an authenticated connection is required.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Client">
            <summary>
            Gets the underlying Socket.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Connected">
            <summary>
            Gets a value indicating whether the underlying Socket for a BluetoothClient is connected to a remote host.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.Encrypt">
            <summary>
            Sets whether an encrypted connection is required.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.InquiryLength">
            <summary>
            Amount of time allowed to perform the query.
            </summary>
            <remarks>On Windows the actual value used is expressed in units of 1.28 seconds, so will be the nearest match for the value supplied.
            The default value is 10 seconds. The maximum is 61 seconds.</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothClient.RemoteMachineName">
            <summary>
            Gets the name of the remote device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.GetStream">
            <summary>
            Gets the underlying stream of data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Dispose">
            <summary>
            Closes the BluetoothClient and the underlying connection.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.Connect(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects the client to a remote Bluetooth host using the specified endpoint.
            </summary>
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> to which you intend to connect.</param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            </summary>
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> to which you intend to connect.</param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">The underlying Socket has been closed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Async Socket operations not currently supported on Mono</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothAddress,System.Guid,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection.
            The remote host is specified by a <see cref="T:InTheHand.Net.BluetoothAddress"/> and a service UUID (Guid).
            </summary>
            <param name="address">The BluetoothAddress of the remote host.</param>
            <param name="service">The service UUID of the remote host.</param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the connect operation.
            This object is passed to the requestCallback delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">The underlying Socket has been closed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Async Socket operations not currently supported on Mono</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection attempt.
            </summary>
            <param name="asyncResult">An IAsyncResult object returned by a call to <see cref="M:InTheHand.Net.Sockets.BluetoothClient.BeginConnect(InTheHand.Net.BluetoothEndPoint,System.AsyncCallback,System.Object)"/>.</param>
            <exception cref="T:System.ArgumentNullException">The asyncResult parameter is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The underlying Socket has been closed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Async Socket operations not currently supported on Mono</exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.ConnectAsync(InTheHand.Net.BluetoothEndPoint)">
            <summary>
            Connects the client to a remote Bluetooth host using the specified endpoint as an asynchronous operation.
            </summary>
            <param name="remoteEP">The <see cref="T:InTheHand.Net.BluetoothEndPoint"/> to which you intend to connect.</param>
            <returns></returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothClient.ConnectAsync(InTheHand.Net.BluetoothAddress,System.Guid)">
            <summary>
            Connects the client to a remote Bluetooth host using the specified address and service UUID as an asynchronous operation.
            </summary>
            <param name="address">The BluetoothAddress of the remote host.</param>
            <param name="service">The service UUID of the remote host.</param>
            <returns></returns>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothDeviceInfo">
            <summary>
            Provides information about an available device obtained by the client during device discovery.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Refresh">
            <summary>
            Forces the system to refresh the device information.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceAddress">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.DeviceName">
            <summary>
            Gets the name of a device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.ClassOfDevice">
            <summary>
            Returns the Class of Device of the remote device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.InstalledServices">
            <summary>
            Returns a list of services which are already installed for use on the calling machine.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Connected">
            <summary>
            Specifies whether the device is connected.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Authenticated">
            <summary>
            Specifies whether the device is authenticated, paired, or bonded.
            All authenticated devices are remembered.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.SetServiceState(System.Guid,System.Boolean)">
            <summary>
            Enables or disables services for a Bluetooth device.
            </summary>
            <remarks>Only applies to Windows platform.</remarks>
            <param name="service"></param>
            <param name="state"></param>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Equals(InTheHand.Net.Sockets.BluetoothDeviceInfo)">
            <summary>
            Compares two BluetoothDeviceInfo instances for equality.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.#ctor(InTheHand.Net.BluetoothAddress)">
            <summary>
            Initializes an instance of the BluetoothDeviceInfo class for the device with the given address.
            </summary>
            <param name="address">The BluetoothAddress.</param>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.Remembered">
            <summary>
            Specifies whether the device is a remembered device.
            Not all remembered devices are authenticated.
            </summary>
            <remarks>Windows caches information about previously seen devices even if not authenticated.</remarks>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastSeen">
            <summary>
            Date and Time this device was last seen by the system.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.LastUsed">
            <summary>
            Date and Time this device was last used by the system.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.BluetoothProtocolType">
            <summary>
            Specifies additional protocols that the <see cref="T:System.Net.Sockets.Socket"/> class supports.
            </summary>
            <remarks>
            <para>These constants are defined by the Bluetooth SIG - <see href="https://www.bluetooth.com/specifications/assigned-numbers/service-discovery/"/>
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.Sdp">
            <summary>
            Service Discovery Protocol (bt-sdp)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.RFComm">
            <summary>
            Bluetooth RFComm protocol (bt-rfcomm)
            </summary>
        </member>
        <member name="F:InTheHand.Net.Sockets.BluetoothProtocolType.L2Cap">
            <summary>
            Logical Link Control and Adaptation Protocol (bt-l2cap)
            </summary>
        </member>
        <member name="T:InTheHand.Net.Sockets.NonSocketNetworkStream">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Sockets.NonSocketNetworkStream.#ctor">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Accept">
            <inheritdoc/>
        </member>
        <member name="P:InTheHand.Net.Sockets.Win32Socket.Available">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Bind(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="P:InTheHand.Net.Sockets.Win32Socket.IsBound">
            <inheritdoc/>
        </member>
        <member name="P:InTheHand.Net.Sockets.Win32Socket.Connected">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Close">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Connect(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Receive(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Listen(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:InTheHand.Net.Sockets.Win32Socket.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <inheritdoc/>
        </member>
        <member name="P:InTheHand.Net.Sockets.Win32Socket.RemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Send(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:InTheHand.Net.Sockets.Win32Socket.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothDevicePicker">
            <summary>
            Picker dialog to select a single Bluetooth device.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothDevicePicker.PickSingleDeviceAsync">
            <summary>
            Display the dialog and allow the user to pick a single device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothDevicePicker.ClassOfDevices">
            <summary>
            Class of device to filter the list of devices.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothProtocol">
            <summary>
            Standard Bluetooth Protocol identifiers.
            </summary>
            -
            <remarks>
            <para>See the list at <see href="http://www.bluetooth.org/Technical/AssignedNumbers/service_discovery.htm"/>.
            </para>
            <para>The Bluetooth Base UUID is {00000000-0000-1000-8000-00805F9B34FB}
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.SdpProtocol">
            <summary>
            [0x0001]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.UdpProtocol">
            <summary>
            [0x0002]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.RFCommProtocol">
            <summary>
            [0x0003]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.TcpProtocol">
            <summary>
            [0x0004]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.TcsBinProtocol">
            <summary>
            [0x0005]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.TcsAtProtocol">
            <summary>
            [0x0006]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.AttProtocol">
            <summary>
            [0x0008]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.ObexProtocol">
            <summary>
            [0x0008]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.IPProtocol">
            <summary>
            [0x0009]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.FtpProtocol">
            <summary>
            [0x000A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.HttpProtocol">
            <summary>
            [0x000C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.WspProtocol">
            <summary>
            [0x000E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.BnepProtocol">
            <summary>
            [0x000F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.UpnpProtocol">
            <summary>
            [0x0010]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.HidpProtocol">
            <summary>
            [0x0011]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.HardcopyControlChannelProtocol">
            <summary>
            [0x0012]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.HardcopyDataChannelProtocol">
            <summary>
            [0x0014]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.HardcopyNotificationProtocol">
            <summary>
            [0x0016]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.AvctpProtocol">
            <summary>
            [0x0017]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.AvdtpProtocol">
            <summary>
            [0x0019]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.CmtpProtocol">
            <summary>
            [0x001B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.UdiCPlaneProtocol">
            <summary>
            [0x001D] ?????
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.McapControlChannelProtocol">
            <summary>
            [0x001E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.McapDataChannelProtocol">
            <summary>
            [0x001F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothProtocol.L2CapProtocol">
            <summary>
            [0x0100]
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothRadio">
            <summary>
            Represents a local Bluetooth Radio device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Default">
            <summary>
            Returns the default Bluetooth radio (if present).
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Name">
            <summary>
            Returns the friendly name of the local Bluetooth radio.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LocalAddress">
            <summary>
            Get the address of the local Bluetooth radio device.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Mode">
            <summary>
            Gets or sets the Scan Mode of the radio.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.LmpSubversion">
            <summary>
            Manufacturer's revision number of the LMP implementation.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.BluetoothRadio.Manufacturer">
            <summary>
            Returns the manufacturer of the BluetoothRadio device.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothService">
            <summary>
            Standard Bluetooth Profile identifiers.
            </summary>
            -
            <remarks>
            <para>See the list at <see href="http://www.bluetooth.org/Technical/AssignedNumbers/service_discovery.htm"/>.
            </para>
            <para>The Bluetooth Base UUID is {00000000-0000-1000-8000-00805F9B34FB}
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Empty">
            <summary>
            Represents an empty service Guid.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BluetoothBase">
            <summary>
            Represents the base Guid from which all standard Bluetooth profiles are derived - not used for connections.
            Is {00000000-0000-1000-8000-00805F9B34FB}
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ServiceDiscoveryServer">
            <summary>
            [0x1000]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BrowseGroupDescriptor">
            <summary>
            [0x1001]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PublicBrowseGroup">
            <summary>
            [0x1002]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SerialPort">
            <summary>
            Provides a basic Serial emulation connect over Bluetooth. [0x1101]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.LanAccessUsingPpp">
            <summary>
            Used to establish PPP connections over RFComm channels. [0x1102]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DialupNetworking">
            <summary>
            [0x1103]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSync">
            <summary>
            [0x1104]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush">
            <summary>
            Used for sending binary objects between devices.[0x1105]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ObexFileTransfer">
            <summary>
            OBEX version of an FTP server [0x1106]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSyncCommand">
            <summary>
            [0x1107]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Headset">
            <summary>
            HSP (Headset Profile) &#x2014; Supports Bluetooth headset devices.[0x1108]
            See also 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CordlessTelephony">
            <summary>
            [0x1109]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioSource">
            <summary>
            [0x110A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioSink">
            <summary>
            [0x110B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControlTarget">
            <summary>
            [0x110C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AdvancedAudioDistribution">
            <summary>
            [0x110D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControl">
            <summary>
            [0x110E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AVRemoteControlController">
            <summary>
            [0x110F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Intercom">
            <summary>
            [0x1110]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Fax">
            <summary>
            [0x1111]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway">
            <summary>
            [0x1112]
            See also
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Wap">
            <summary>
            [0x1113]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.WapClient">
            <summary>
            [0x1114]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Panu">
            <summary>
            [0x1115]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Nap">
            <summary>
            [0x1116]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GN">
            <summary>
            [0x1117]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DirectPrinting">
            <summary>
            [0x1118]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ReferencePrinting">
            <summary>
            [0x1119]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging">
            <summary>
            [0x111A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder">
            <summary>
            [0x111B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive">
            <summary>
            [0x111C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects">
            <summary>
            [0x111D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.Handsfree">
            <summary>
            Supports hands free kits such as a car kits which provide audio and more advanced call control than the Headset profile. [0x111E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HandsfreeAudioGateway">
            <summary>
            [0x111F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.DirectPrintingReferenceObjects">
            <summary>
            [0x1120]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.ReflectedUI">
            <summary>
            [0x1121]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.BasicPrinting">
            <summary>
            Used for printing simple text, HTML, vCard objects and similar. [0x1122]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PrintingStatus">
            <summary>
             [0x1123]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HumanInterfaceDevice">
            <summary>
            Supports human interface devices such as keyboards and mice. [0x1124]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacement">
            <summary>
             [0x1125]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacementPrint">
            <summary>
             [0x1126]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HardcopyCableReplacementScan">
            <summary>
             [0x1127]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.CommonIsdnAccess">
            <summary>
            Common_ISDN_Access [0x1128]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoConferencingGW">
            <summary>
             [0x1129]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiMT">
            <summary>
            UDI_MT [0x112A]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UdiTA">
            <summary>
            UDI_TA [0x112B]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.AudioVideo">
            <summary>
             [0x112C]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.SimAccess">
            <summary>
            SIM_Access [0x112D]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccessPce">
            <summary>
            Phonebook Access - PCE [0x112E]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccessPse">
            <summary>
            Phonebook Access - PSE [0x112F]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PhonebookAccess">
            <summary>
            Phonebook Access [0x1130]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetHeadset">
            <summary>
            Headset [0x1131]
            See also
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
            </summary>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.Headset"/>
            <seealso cref="F:InTheHand.Net.Bluetooth.BluetoothService.HeadsetAudioGateway"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageAccessServer">
            <summary>
            Message Access Server [0x1132]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageNotificationServer">
            <summary>
            Message Notification Server [0x1133]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.MessageAccessProfile">
            <summary>
            Message Access Profile [0x1134]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.PnPInformation">
            <summary>
            Bluetooth Device Identification. [0x1200]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericNetworking">
            <summary>
             [0x1201]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericFileTransfer">
            <summary>
             [0x1202]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericAudio">
            <summary>
             [0x1203]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.GenericTelephony">
            <summary>
             [0x1204]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnp">
            <summary>
             [0x1205]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIP">
            <summary>
             [0x1206]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPPan">
            <summary>
            ESDP_UPNP_IP_PAN [0x1300]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPLap">
            <summary>
            ESDP_UPNP_IP_LAP [0x1301]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.UPnpIPL2Cap">
            <summary>
            ESDP_UPNP_L2CAP [0x1302]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoSource">
            <summary>
            Video Distribution Profile - Source [0x1303]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoSink">
            <summary>
            Video Distribution Profile - Sink [0x1304]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.VideoDistribution">
            <summary>
            Video Distribution Profile [0x1305]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDevice">
            <summary>
            Health Device Profile (HDP) [0x1400]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDeviceSource">
            <summary>
            Health Device Profile (HDP) - Source [0x1401]
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothService.HealthDeviceSink">
            <summary>
            Health Device Profile (HDP) - Sink [0x1402]
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Guid)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid">
            The service class UUID as a <see cref="T:System.Guid"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Int16)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.Int16"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid16"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.UInt16)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit short UUID form as a <see cref="T:System.UInt16"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid16"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Int32)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit short UUID form as a <see cref="T:System.Int32"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid32"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.UInt32)">
            <summary>
            Retrieves the name of the Service Class UUID that has the specified value. 
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            A string containing the name of the service class whose UUID value is <paramref name="uuid32"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.Int16)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.Int16"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.UInt16)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid16">
            The service class UUID in the 16-bit UUID short form as a <see cref="T:System.UInt16"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.Int32)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.Int32"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.BluetoothService.CreateBluetoothUuid(System.UInt32)">
            <summary>
            Create a full 128-bit Service class UUID from its 16-bit short form.
            </summary>
            <param name="uuid32">
            The service class UUID in the 32-bit UUID short form as a <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            A <see cref="T:System.Guid"/> containing the full 128-bit form of the
            supplied Bluetooth service class UUID.
            </returns>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version10">
            <summary>
            Bluetooth Core Specification 1.0b
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version11">
            <summary>
            Bluetooth Core Specification 1.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version12">
            <summary>
            Bluetooth Core Specification 1.2
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version20">
            <summary>
            Bluetooth Core Specification 2.0 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version21">
            <summary>
            Bluetooth Core Specification 2.1 + EDR
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version30">
            <summary>
            Bluetooth Core Specification 3.0 + HS
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version40">
            <summary>
            Bluetooth Core Specification 4.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version41">
            <summary>
            Bluetooth Core Specification 4.1
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version42">
            <summary>
            Bluetooth Core Specification 4.2
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version50">
            <summary>
            Bluetooth Core Specification 5.0
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothVersion.Version51">
            <summary>
            Bluetooth Core Specification 5.1
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ClassOfDevice">
            <summary>
            Describes the device and service capabilities of a device.
            </summary>
            -
            <remarks>
            <para>Is returned by the properties
            <see cref="P:InTheHand.Net.Sockets.BluetoothDeviceInfo.ClassOfDevice">BluetoothDeviceInfo.ClassOfDevice</see>
            and
            <see cref="P:InTheHand.Net.Bluetooth.BluetoothRadio.ClassOfDevice">BluetoothRadio.ClassOfDevice</see>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.#ctor(System.UInt32)">
            <summary>
            Initialize a new instance of class <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>.
            </summary>
            -
            <remarks>
            <para>An example raw value is 0x00020104, which stands for
            device: DesktopComputer, service: Network.
            </para>
            </remarks>
            -
            <param name="cod">A <see cref="T:System.UInt32"/> containing the
            raw Class of Device value.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.#ctor(InTheHand.Net.Bluetooth.DeviceClass,InTheHand.Net.Bluetooth.ServiceClass)">
            <summary>
            Initialize a new instance of class <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>.
            </summary>
            -
            <param name="device">A <see cref="T:InTheHand.Net.Bluetooth.DeviceClass"/>
            value.
            </param>
            <param name="service">A <see cref="T:InTheHand.Net.Bluetooth.ServiceClass"/>
            value.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Device">
            <summary>
            Returns the device type.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.MajorDevice">
            <summary>
            Returns the major device type.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Service">
            <summary>
            Returns supported service types.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.Value">
            <summary>
            Gets the numerical value.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.ClassOfDevice.ValueAsInt32">
            <summary>
            Gets the numerical value, suitable for CLS Compliance.
            </summary>
            <seealso cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Value"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.ToString">
            <summary>
            Returns the numerical value represented in a hexadecimal.
            </summary>
            -
            <returns>A <see cref="T:System.String"/> containing
            the numerical value represented in a hexadecimal
            e.g. "720104", "5A020C".
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified 
            object.
            </summary>
            <param name="obj">An object
            value to compare with the current instance.
            </param>
            <returns>true if <paramref name="obj"/> is an instance of <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>
            and equals the value of this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.ClassOfDevice.Equals(InTheHand.Net.Bluetooth.ClassOfDevice)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified 
            <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/> value.
            </summary>
            <param name="other">An <see cref="T:InTheHand.Net.Bluetooth.ClassOfDevice"/>
            value to compare with the current instance.
            </param>
            <returns>true if <paramref name="other"/>
            has the same value as this instance; otherwise, false.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.DeviceClass">
            <summary>
            Class of Device flags as assigned in the Bluetooth specifications.
            </summary>
            <remarks>
            <para>Is returned by the property <see
            cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Device">ClassOfDevice.Device</see>.
            </para>
            <para>Defined in Bluetooth Specifications <see href="https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Miscellaneous">
            <summary>
            Miscellaneous &#x2014; 
            [Ref #2: Used where a more specific Major Device Class code
            is not suited (but only as specified in this document). Devices
            that do not have a major class code assigned can use the all-1 code
            (<see cref="F:InTheHand.Net.Bluetooth.DeviceClass.Uncategorized"/>)
            until 'classified']
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Computer">
            <summary>
            Major class: Computer (desktop,notebook, PDA, organizers, .... ).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.DesktopComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Desktop workstation.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.ServerComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Server-class computer.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.LaptopComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Laptop.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.HandheldComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Handheld PC/PDA (clam shell).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.PdaComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Palm sized PC/PDA.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.WearableComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Wearable computer (Watch sized).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.TabletComputer">
            <summary>
            Major class: Computer
            &#x2022; Minor class: Tablet.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Phone">
            <summary>
            Major class: Phone (cellular, cordless, payphone, modem, ...).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.CellPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Cellular.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.CordlessPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Cordlss.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.SmartPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Smart phone.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.WiredPhone">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Wired modem or voice gateway.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.IsdnAccess">
            <summary>
            Major class: Phone
            &#x2022; Minor class: Common ISDN Access.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.AccessPointAvailable">
            <summary>
            Major class: LAN /Network Access point.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.AudioVideoUnclassified">
            <summary>
            Major class: Audio/Video (headset,speaker,stereo, video display, vcr.....
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Peripheral">
            <summary>
            Major class: Peripheral (mouse, joystick, keyboards, ..... ).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Imaging">
            <summary>
            Major class: Imaging (printing, scanner, camera, display, ...).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Wearable">
            <summary>
            Major class: Wearable.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Toy">
            <summary>
            Major class: Toy.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Medical">
            <summary>
            Major class: Medical.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.DeviceClass.Uncategorized">
            <summary>
            Uncategorized, specific device code not specified
            &#x2014; see <see cref="F:InTheHand.Net.Bluetooth.DeviceClass.Miscellaneous"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId">
            <summary>
            A Service Attribute Id identifies each attribute within an SDP service record.
            </summary>
            -
            <remarks>
            <para>The content of the record for a particular service class is defined in the
            profile&#x2019;s specification along with the IDs it uses. The IDs for the 
            common standard services have beed defined here, as e.g. 
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId"/>,
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId"/>,
            etc, see namespace <see cref="N:InTheHand.Net.Bluetooth.AttributeIds"/>.
            The Service Discovery profile itself defines IDs, some that can be used 
            in any record <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId"/>, 
            and others
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>,
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>.
            </para>
            <para>Note that except for the attributes in the &#x201C;Universal&#x201D; category 
            the IDs are <i>not</i> unique, for instance the ID is 0x0200 for both 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList"/>
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId"/>
            from <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>
            respectively.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.AttributeIdLookup">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value in the
            specified Attribute ID class sets.  Implementing <see cref="T:System.Enum"/>-like
            behaviour.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.AttributeIdLookup.GetName(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,System.Type[])">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value in the
            specified Attribute ID class sets.
            </summary>
            -
            <remarks>
            Each particular service (ObexPushProfile, SerialPortProfile) etc defines
            its own SDP record content and the Attribute IDs are defined locally in
            each, and thus with values overlapping with other service specifications.
            Therefore for each profile we must define the set of Attribute IDs used, this
            is done by creating a class for each with the IDs defined as <c>const</c>
            member fields.
            </remarks>
            -
            <param name="id">
            The Attribute Id as an <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>
            </param>
            <param name="attributeIdDefiningClasses">
            The set of classes defining Attribute IDs for the service classed contained
            in the record containing this attribute id.
            </param>
            -
            <returns>
            A string containing the name of the Attribute ID whose numerical value is <paramref name="id"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.AttributeIdLookup.GetName(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,System.Type[],InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem[],InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem@)">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value 
            and using one of the languages from the supplied LanguageBaseItem 
            in the specified AttributeID class sets.
            </summary>
            -
            <remarks>
            Each particular service (ObexPushProfile, SerialPortProfile) etc defines
            its own SDP record content and the Attribute IDs are defined locally in
            each, and thus with values overlapping with other service specifications.
            Therefore for each profile we must define the set of Attribute IDs used, this
            is done by creating a class for each with the IDs defined as <c>const</c>
            member fields.
            </remarks>
            -
            <param name="id">
            The Attribute Id as an <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>
            </param>
            <param name="attributeIdDefiningClasses">
            The set of classes defining Attribute IDs for the service classed contained
            in the record containing this attribute id.
            </param>
            <param name="langBaseList">
            The list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> applying 
            to the current record.  They are used when an attribute is marked as a
            multi-language one and thus need the base offset removed from the specified
            numerical value.
            </param>
            <param name="applicableLangBase">
            The applicable <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> if the 
            matched attribute is a multi-language one.  <see langword="null"/> 
            (<see langword="Nothing"/> in Visual Basic), if no attribute was matched
            or it was not a multi-language one.
            </param>
            -
            <returns>
            A string containing the name of the Attribute ID whose numerical value is <paramref name="id"/>,
            or a null reference (<c>Nothing</c> in Visual Basic) if no such constant is found.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.AttributeIdLookup.GetNameIfMatchesMultiLang(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,System.Reflection.FieldInfo,InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem[],InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem@)">
            <summary>
            Retrieves the name of the SDP Attribute ID with the given value 
            and using one of the languages from the supplied LanguageBaseItem 
            in the specified AttributeID class sets
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.StringWithLanguageBaseAttribute">
            <summary>
            Indicates that the field to which it is applied represents an SDP Attribute 
            that can exist in multiple language instances and thus has a language base 
            offset applied to its numerical ID when added to a record.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.StringWithLanguageBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.StringWithLanguageBaseAttribute"/>
            class. 
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Device Identification Profile specification.
            </summary>
            -
            <remarks>
            <para>&#x201C;This document specifies a method by which Bluetooth devices may
            provide information that may be used by peer Bluetooth devices to
            find representative icons or load associated support software. This
            information is published as Bluetooth SDP records, and optionally in
            an Extended Inquiry Response.&#x201D;
            </para>
            <para>Used in records with Service Class ID:
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.PnPInformation"/>.
            </para>
            <para>As well as the attributes defined here, use of some of the universal
            attributes is recommended, they are:
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ClientExecutableUrl"/>,
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription"/>,
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.DocumentationUrl"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.SpecificationId">
            <summary>
            SpecificationId [0x0200]
            </summary>
            <remarks>The version of the Bluetooth Device ID Profile Specification
            supported by the device.
            e.g. version 1.3 will be value 0x0103. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorId">
            <summary>
            VendorId [0x0201]
            </summary>
            <remarks>
            <para>The id assigned by the organisation in <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorIdSource" />. [<c>UInt16</c>]
            </para>
            <para>&#x201C;The value <c>FFFF</c> is reserved as the default id when
            no Device ID Service Record is present in the device.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.ProductId">
            <summary>
            ProductId [0x0202]
            </summary>
            <remarks>Distinguishes between different products made by the same vendor. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.Version">
            <summary>
            Version [0x0203]
            </summary>
            <remarks>The version of the product. [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.PrimaryRecord">
            <summary>
            PrimaryRecord [0x0204]
            </summary>
            <remarks>If multiple Device ID records are present this indicates the one &#x2019;primary&#x201A; record. [<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.DeviceIdProfileAttributeId.VendorIdSource">
            <summary>
            VendorIdSource [0x0205]
            </summary>
            <remarks>Designates which organisation assigned the Vendor ID value. [<c>UInt16</c>]
            <list type="table">
            <listheader><term>Value</term><term>Assigning Organisation</term></listheader>
            <item><term>1</term><term>Bluetooth SIG</term></item>
            <item><term>2</term><term>USB Implementors Forum</term></item>
            <item><term>0, 3-FFFF</term><term>reserved</term></item>
            </list>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Human Interface Device (HID) Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DeviceReleaseNumber">
            <summary>
            HIDDeviceReleaseNumber
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;A numeric expression identifying the device release number in Binary-Coded 
            Decimal. This is a vendor-assigned field, which defines the version of 
            the product identified by the Bluetooth Device Identification [13] VendorID 
            and ProductID attributes. This attribute is intended to differentiate 
            between versions of products with identical VendorIDs and ProductIDs. 
            The value of the field is 0xJJMN for version JJ.M.N (JJ – major version 
            number, M – minor version number, N – sub-minor version number). &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ParserVersion">
            <summary>
            HIDParserVersion
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;Each version of a profile is assigned a 16-bit unsigned integer version
            number of the base HID Specification [4] that the device was designed to. The value
            of the field is 0xJJMN for version JJ.M.N &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DeviceSubclass">
            <summary>
            HIDDeviceSubclass
            </summary>
            <remarks><para>[<c>8-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDDeviceSubclass attribute is an 8-bit integer, which
            identifies the type of device (keyboard, mouse, joystick, gamepad,
            remote control, sensing device, etc.). Keyboards and mice are required
            to support boot mode operation. In boot mode, a device presents a fixed
            report, thus negating the requirement for a HID parser.
            <para></para>The Attribute value is identical to the low-order 8 bits
            of the Class of Device/Service (CoD) field in the FHS packet, where
            bits 7-2 contain the 6 bit Minor Device Class value (defined in Section
            1.2 of the Bluetooth Assigned Numbers document [8]) and bits 1-0 are
            set to zero.  &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.CountryCode">
            <summary>
            HIDCountryCode
            </summary>
            <remarks><para>[<c>8-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDCountryCode attribute is an 8-bit integer, which identifies
            which country the hardware is localized for. Most hardware is not localized
            and thus this value would be zero (0).&#x2026; 
            </para><para>The valid country codes are listed in the HID Specification
            [4].&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.VirtualCable">
            <summary>
            HIDVirtualCable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDVirtualCable attribute is a boolean value, which indicates
            whether the device supports virtual connections as described in Section
            Virtual Cables and Connection Re-Establishment. Devices that have this
            attribute True indicate that the device supports 1:1 bonding with a host,
            and the device expects to automatically reconnect if the connection is
            dropped for any unknown reason.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ReconnectInitiate">
            <summary>
            HIDReconnectInitiate
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDReconnectInitiate attribute is a boolean value, which
            indicates whether the device initiates the reconnection process or
            expects the host to. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.DescriptorList">
            <summary>
            HIDDescriptorList
            </summary>
            <remarks><para>[<c>Data element sequence</c>]</para>
            <para>
            &#x201C;The HIDDescriptorList Data Element Sequence performs the function of the
            HID Descriptor that is defined in Section 6.2 of the HID Specification [4]. The
            HIDDescriptorList identifies the descriptors associated with the device. &#x2026;
            </para><para>The HIDDescriptorList is a Data Element Sequence that consists of
            one or more HIDDescriptors. A HIDDescriptor is a data element sequence containing, 
            minimally, a pair of elements. For compatibility with future versions of the HID
            profile, addition elements found in a HIDDescriptor shall be ignored. &#x2026;
                   &#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.LangIdBaseList">
            <summary>
            HIDLANGIDBaseList
            </summary>
            <remarks><para>[<c>Data element sequence</c>]</para>
            <para>
            &#x201C;The HIDLANGIDBaseList is a Data Element Sequence that consists of one or
            more HIDLANGIDBases. A HIDLANGIDBase is a data element sequence containing, minimally, 
            two elements for each of the languages used in the service record: a language identifier
            (LANGID) and a base attribute ID. For compatibility with future versions of the
            HID profile, additional elements found in a HIDLANGIDBase shall be ignored.
            </para><para>The first element, called the HIDLANGID, contains an identifier representing
            the natural language ID. The language is encoded according to the “Universal Serial
            Bus Language Identifiers (LANGIDs)” Specification [9].
            </para><para>The second element, called the HIDLanguageBase, contains an attribute
            ID that serves as the base attribute ID for the natural language in the service
            record. Different service records within a server may use different base attribute
            ID values for the same language. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SdpDisable">
            <summary>
            HIDSDPDisable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDSDPDisable attribute is a boolean value, which indicates whether
            connection to the SDP channel and Control or Interrupt channels are mutually exclusive.
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.BatteryPower">
            <summary>
            HIDBatteryPower
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDBatteryPower attribute is a boolean value, which indicates whether
            the device is battery powered (and requires careful power management) or has some
            other source of power that requires minimal management. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.RemoteWake">
            <summary>
            HIDRemoteWake
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;The HIDRemoteWake attribute is a boolean value, which indicates whether
            the device considers itself remote wake up-capable. When a system enters a suspend
            (or standby) state, this flag shall be used to determine whether the host includes
            this device in the set of devices that can wake it up. A mouse or keyboard are
            typical examples of Remote Wake up devices.&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.BootDevice">
            <summary>
            HIDBootDevice
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;HIDBootDevice is an 8-bit Boolean value that when True indicates whether
            the device supports boot protocol mode and by inference the Set_Protocol and Get_Protocol
            commands. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SupervisionTimeout">
            <summary>
            HIDSupervisionTimeout
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;The HIDSupervisionTimeout is a 16-bit value which indicates the device
            vendor’s recommended baseband Link Supervision Timeout value in slots. &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.NormallyConnectable">
            <summary>
            HIDNormallyConnectable
            </summary>
            <remarks><para>[<c>8-bit Boolean</c>]</para>
            <para>
            &#x201C;HIDNormallyConnectable is an optional Boolean attribute that specifies
            whether a HID is normally in Page Scan mode (when no connection is active) or not.
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.ProfileVersion">
            <summary>
            HIDProfileVersion
            </summary>
            <remarks><para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            &#x201C;Each device designed to this specification shall include a 16-bit unsigned
            integer version number of the Bluetooth HID Specification (this document) that
            the device was designed to. The value of the field is 0xJJMN for version JJ.M.N
            (JJ – major version number, M – minor version number, N – sub-minor version number);
            &#x2026;&#x201D;
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.SSRHostMaxLatency">
            <summary>
            HIDSSRHostMaxLatency
            </summary>
            <remarks>
            <para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            This parameter is used to inform the Bluetooth HID Host that the Bluetooth HID device
            supports Sniff Subrating AND requires that the Bluetooth HID Host send a Sniff
            Subrating request to the Bluetooth HID device with a Maximum Remote Latency setting 
            if set in the HIDSSRHostMaxLatency attribute.This setting is usually used in a
            Bluetooth HID device that supports features which require data to be sent with a well-
            controlled latency from the Bluetooth HID Host to the Bluetooth HID device. The units of
            this attribute are baseband slots (625µs), identical to the units used in the HCI Sniff
            Subrating command.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HidProfileAttributeId.HostMinTimeout">
            <summary>
            SSRHostMinTimeout
            </summary>
            <remarks>
            <para>[<c>16-bit unsigned integer</c>]</para>
            <para>
            This parameter is used to inform the Bluetooth HID Host that the Bluetooth HID device
            supports Sniff Subrating AND requires that the Bluetooth HID Host send a Sniff
            Subrating request to the Bluetooth HID device with a Minimum Timeout setting if set in
            the HIDSSRHostMinTimeout attribute.This setting is usually used in a Bluetooth HID
            device that supports features which require data to be sent with a well-controlled latency
            from the Bluetooth HID Host to the Bluetooth HID device.The units of this attribute are
            baseband slots (625µs), identical to the units used in the HCI Sniff Subrating command.
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem">
            <summary>
            Represents a member of the SDP 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>,
            Attribute
            which provides for multi-language strings in a record.
            </summary>
            <remarks>
            &#x201C;The 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute is a list in which each 
            member contains a language identifier, a character encoding identifier, and 
            a base attribute ID for each of the natural languages used in the service 
            record.&#x201D;
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.PrimaryLanguageBaseAttributeId">
            <summary>
            The primary language is specified to have base attribute ID 0x0100.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.Utf8EncodingId">
            <summary>
            The Id for the UTF-8 encoding.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.#ctor(System.UInt16,System.UInt16,InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <overloads>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </overloads>
            -
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.#ctor(System.Int16,System.Int16,InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are 0x656E which is "en", and 0x6672 which is "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.#ctor(System.String,System.UInt16,InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are "en", and "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.#ctor(System.String,System.Int16,InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <summary>
            Initialize a new instance of the <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> class.
            </summary>
            -
            <param name="naturalLanguage">The Natural Language field of the entry.
            Some example values are "en", and "fr".
            </param>
            <param name="encodingId">The IETF Charset identifier for this language.
            e.g. 3 for US-ASCII and 106 for UTF-8,
            see <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
            </param>
            <param name="baseAttributeId">The base Attribute Id for this language
            in the record.
            e.g. 0x100 for the Primary language.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ParseListFromElementSequence(InTheHand.Net.Bluetooth.Sdp.ServiceElement)">
            <summary>
            Gets the list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>
            items in the service record.
            </summary>
            -
            <param name="elementSequence">
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> holding the 
            data from the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute.
            </param>
            -
            <returns>
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.  
            An array length zero is returned if the service record contains no such attribute.
            </returns>
            -
            <exception cref="T:System.ArgumentException">
            <paramref name="elementSequence"/> is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
            The element sequence contains incorrectly formatted or invalid content,
            for example it contains the wrong element data types, or doesn't contain
            the elements in groups of three as required.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.CreateElementSequenceFromList(InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem[])">
            <summary>
            Create a data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            attribute
            from the list of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>
            </summary>
            -
            <param name="list">
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </param>
            -
            <returns>
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> holding the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/>
            element, to be added to a generally the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.CreateEnglishUtf8PrimaryLanguageItem">
            <summary>
            Create a <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> instance
            for a primary language of English and a string encoding of UTF-8.
            </summary>
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/> instance.
            </returns>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.NaturalLanguage">
            <summary>
            Gets the value of the Natural Language field of the entry.
            </summary>
            <example>Some example value may be "en", and "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.NaturalLanguageAsUInt16">
            <summary>
            Gets the value of the Natural Language field of the entry, as a <see cref="T:System.UInt16"/>.
            </summary>
            <example>Some example value may be 0x656e for "en", and 0x6672 for "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.NaturalLanguageAsInt16">
            <summary>
            Gets the value of the Natural Language field of the entry, as a <see cref="T:System.UInt16"/>.
            </summary>
            <example>Some example value may be 0x656e for "en", and 0x6672 for "fr".</example>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.AttributeIdBase">
            <summary>
            Gets the base Attribute Id for this language.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.EncodingId">
            <summary>
            Get the IETF Charset identifier for this language.
            </summary>
            -
            <remarks>
            <para>Example values are 3 for US-ASCII and 106 for UTF-8.
            See the full list at <see href="http://www.iana.org/assignments/character-sets"/>
            </para>
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingIdAsInt16"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.EncodingIdAsInt16">
            <summary>
            Get the IETF Charset identifier for this language, as an Int16.
            </summary>
            -
            <remarks>
            <para>
            See <see cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>.
            </para>
            </remarks>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.LanguageBaseItem.EncodingId"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.GetEncoding">
            <summary>
            Gets an <see cref="T:System.Text.Encoding"/> appropriate for this language base item.
            </summary>
            -
            <returns>The <see cref="T:System.Text.Encoding"/>
            appropriate for this language base item.
            </returns>
            -
            <remarks>
            <para>We support the following set of mappings from encoding id to .NET
            Encoding name.
            <list type="table">
            <listheader><term>Id</term><description>Encoding</description></listheader>
            <item><term>3</term><description>us-ascii</description></item>
            <item><term>4</term><description>iso-8859-1</description></item>
            <item><term>5</term><description>iso-8859-2</description></item>
            <item><term>6</term><description>iso-8859-3</description></item>
            <item><term>7</term><description>iso-8859-4</description></item>
            <item><term>8</term><description>iso-8859-5</description></item>
            <item><term>9</term><description>iso-8859-6</description></item>
            <item><term>10</term><description>iso-8859-7</description></item>
            <item><term>11</term><description>iso-8859-8</description></item>
            <item><term>12</term><description>iso-8859-9</description></item>
            <item><term>13</term><description>iso-8859-10</description></item>
            <item><term>106 (0x006a)</term><description>UTF-8</description></item>
            <item><term>109</term><description>iso-8859-13</description></item>
            <item><term>110</term><description>iso-8859-14</description></item>
            <item><term>111</term><description>iso-8859-15</description></item>
            <item><term>112</term><description>iso-8859-16</description></item>
            <item><term>1013 (0x03f5)</term><description>unicodeFFFE (UTF-16BE)</description></item>
            <item><term>1014</term><description>utf-16 (UTF-16LE)</description></item>
            <item><term>1015</term><description>utf-16 (UTF-16, we assume UTF16-LE)</description></item>
            <item><term>2252 to 2258 (0x08cc to 0x08d2)</term><description>windows-1252 to Windows-1258</description></item>
            </list>
            Note that not all platforms support all these Encodings, for instance on
            my Windows XP SP2 box iso-8859-10/-14/-16 are not supported.  On NETCF on
            Windows Mobile 5 only five of the ISO-8859 encodings are supported.
            Regardless I've seen no SDP records that use ISO-8859 encodings so this is 
            not a problem, most records actually use UTF-8.
            </para>
            </remarks>
            -
            <exception cref="T:System.NotSupportedException">
            The IETF encoding id for this language base item is currently unknown.
            If valid, add it to the <c>s_IetfCharsetIdToDotNetEncodingNameTable</c> table, 
            providing a mapping to its Windows code page name.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.TestAllDefinedEncodingMappingRows(System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ErrorMsgLangBaseListParseNotU16">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ErrorMsgLangBaseListParseBaseInvalid">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ErrorMsgLangBaseListParseNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ErrorMsgLangBaseListParseNotInThrees">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ErrorMsgFormatUnrecognizedEncodingId">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem.ErrorMsgLangMustAsciiTwoChars">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId">
            <summary>
            Defines the ids for the &#x201C;universal attributes&#x201D;, those 
            &#x201C;whose definitions are common to all service records.&#x201D;
            </summary>
            <remarks>
            <para>&#x201C;
            Universal attributes are those service attributes whose definitions are common
            to all service records. Note that this does not mean that every service record
            must contain values for all of these service attributes. However, if a service
            record has a service attribute with an attribute ID allocated to a universal
            attribute, the attribute value must conform to the universal attribute’s definition.
            </para><para>&#x201C;
            Only two attributes are required to exist in every service record instance. They
            are the ServiceRecordHandle (attribute ID 0x0000) and the ServiceClassIDList
            (attribute ID 0x0001). All other service attributes are optional within a service
            record.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x000D-0x01FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceRecordHandle">
            <summary>
            A service record handle is a 32-bit number that uniquely identifies each service
            record within an SDP server.
            [0x0000]
            </summary>
            <remarks>
            <para>[<c>32-bit unsigned integer</c>]</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList">
            <summary>
            The ServiceClassIDList attribute consists of a data element sequence in which
            each data element is a UUID representing the service classes that a given service
            record conforms to.
            [0x0001]
            </summary>
            <remarks>
            <para>[<c>Data Element Sequence</c>]</para>
            <para>&#x201C;The ServiceClassIDList attribute consists of a data element sequence in which
            each data element is a UUID representing the service classes that a given service
            record conforms to. The UUIDs are listed in order from the most specific
            class to the most general class. The ServiceClassIDList must contain at least
            one service class UUID.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceRecordState">
             <summary>
             The ServiceRecordState is a 32-bit integer that is used to facilitate caching of
             ServiceAttributes.
             [0x0002]
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceRecordState is a 32-bit integer that is used to facilitate caching of
             ServiceAttributes. If this attribute is contained in a service record, its value is
             guaranteed to change when any other attribute value is added to, deleted from
             or changed within the service record. This permits a client to check the value of
             this single attribute. If its value has not changed since it was last checked, the
             client knows that no other attribute values within the service record have
             changed.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceId">
             <summary>
             The ServiceID is a UUID that universally and uniquely identifies the service
             instance described by the service record.
             [0x0003]
             </summary>
            <remarks>
             <para>[<c>UUID</c>]</para>
             <para>&#x201C;
             The ServiceID is a UUID that universally and uniquely identifies the service
             instance described by the service record. This service attribute is particularly
             useful if the same service is described by service records in more than one
             SDP server.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList">
             <summary>
             The ProtocolDescriptorList attribute describes one or more protocol stacks that
             may be used to gain access to the service described by the service record.
             [0x0004]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c> or <c>Data Element Alternative</c>]</para>
             <para>&#x201C;
             The ProtocolDescriptorList attribute describes one or more protocol stacks that
             may be used to gain access to the service described by the service record.
             </para><para>&#x201C;
             If the ProtocolDescriptorList describes a single stack, it takes the form of a data
             element sequence in which each element of the sequence is a protocol
             descriptor. Each protocol descriptor is, in turn, a data element sequence whose
             first element is a UUID identifying the protocol and whose successive elements
             are protocol-specific parameters. Potential protocol-specific parameters are a
             protocol version number and a connection-port number. The protocol descriptors
             are listed in order from the lowest layer protocol to the highest layer protocol
             used to gain access to the service.
             </para><para>&#x201C;
             If it is possible for more than one kind of protocol stack to be used to gain
             access to the service, the ProtocolDescriptorList takes the form of a data element
             alternative where each member is a data element sequence as described
             in the previous paragraph.
             </para><para>&#x201C;
             Protocol Descriptors
             </para><para>&#x201C;
             A protocol descriptor identifies a communications protocol and provides protocol-
             specific parameters. A protocol descriptor is represented as a data element
             sequence. The first data element in the sequence must be the UUID that identifies
             the protocol. Additional data elements optionally provide protocol-specific
             information, such as the L2CAP protocol/service multiplexer (PSM) and the
             RFCOMM server channel number (CN) shown below.
             </para><para>&#x201C;
             ProtocolDescriptorList Examples
             </para><para>&#x201C;
             These examples are intended to be illustrative. The parameter formats for each
             protocol are not defined within this specification.
             </para><para>&#x201C;
             In the first two examples, it is assumed that a single RFCOMM instance exists
             on top of the L2CAP layer. In this case, the L2CAP protocol specific information
             (PSM) points to the single instance of RFCOMM. In the last example, two different
             and independent RFCOMM instances are available on top of the L2CAP
             layer. In this case, the L2CAP protocol specific information (PSM) points to a
             distinct identifier that distinguishes each of the RFCOMM instances. According
             to the L2CAP specification, this identifier takes values in the range
             0x1000-0xFFFF.
             </para><para>&#x201C;
             IrDA-like printer
             </para><para>&#x201C;
             ( ( L2CAP, PSM=RFCOMM ), ( RFCOMM, CN=1 ), ( PostscriptStream ) )
             </para><para>&#x201C;
             IP Network Printing
             </para><para>&#x201C;
             ( ( L2CAP, PSM=RFCOMM ), ( RFCOMM, CN=2 ), ( PPP ), ( IP ), ( TCP ),
             ( IPP ) )
             </para><para>&#x201C;
             Synchronization Protocol Descriptor Example
             </para><para>&#x201C;
             ( ( L2CAP, PSM=0x1001 ), ( RFCOMM, CN=1 ), ( Obex ), ( vCal ) )
             </para><para>&#x201C;
             ( ( L2CAP, PSM=0x1002 ), ( RFCOMM, CN=1 ), ( Obex ),
             </para><para>&#x201C;
             ( otherSynchronisationApplication ) )
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BrowseGroupList">
             <summary>
             The BrowseGroupList attribute consists of a data element sequence in which
             each element is a UUID that represents a browse group to which the service
             record belongs.
             [0x0005]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The BrowseGroupList attribute consists of a data element sequence in which
             each element is a UUID that represents a browse group to which the service
             record belongs. The top-level browse group ID, called PublicBrowseRoot and
             representing the root of the browsing hierarchy, has the value 
             00001002-0000-1000-8000-00805F9B34FB 
             (UUID16: 0x1002) from the Bluetooth Assigned
             Numbers document.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList">
             <summary>
             In order to support human-readable attributes for multiple natural languages in
             a single service record, a base attribute ID is assigned for each of the natural
             languages used in a service record. The human-readable universal attributes
             are then defined with an attribute ID offset from each of these base values,
             rather than with an absolute attribute ID.
             [0x0006]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             In order to support human-readable attributes for multiple natural languages in
             a single service record, a base attribute ID is assigned for each of the natural
             languages used in a service record. The human-readable universal attributes
             are then defined with an attribute ID offset from each of these base values,
             rather than with an absolute attribute ID.
             </para><para>&#x201C;
             The LanguageBaseAttributeIDList attribute is a list in which each member contains
             a language identifier, a character encoding identifier, and a base attribute
             ID for each of the natural languages used in the service record. The Language-
             BaseAttributeIDList attribute consists of a data element sequence in which
             each element is a 16-bit unsigned integer. The elements are grouped as triplets
             (threes).
             </para><para>&#x201C;
             The first element of each triplet contains an identifier representing the natural
             language. The language is encoded according to ISO 639:1988 (E/F): “Code
             for the representation of names of languages”.
             </para><para>&#x201C;
             The second element of each triplet contains an identifier that specifies a character
             encoding used for the language. Values for character encoding can be
             found in IANA's database1, and have the values that are referred to as MIBEnum
             values. The recommended character encoding is UTF-8.
             </para><para>&#x201C;
             The third element of each triplet contains an attribute ID that serves as the
             base attribute ID for the natural language in the service record. Different service
             records within a server may use different base attribute ID values for the
             same language.
             </para><para>&#x201C;
             To facilitate the retrieval of human-readable universal attributes in a principal
             language, the base attribute ID value for the primary language supported by a
             service record must be 0x0100. Also, if a LanguageBaseAttributeIDList
             attribute is contained in a service record, the base attribute ID value contained
             in its first element must be 0x0100.
             </para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceInfoTimeToLive">
             <summary>
             The ServiceTimeToLive attribute is a 32-bit integer that contains the number of
             seconds for which the information in a service record is expected to remain
             valid and unchanged.
             [0x0007]
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceTimeToLive attribute is a 32-bit integer that contains the number of
             seconds for which the information in a service record is expected to remain
             valid and unchanged. This time interval is measured from the time that the
             attribute value is retrieved from the SDP server. This value does not imply a
             guarantee that the service record will remain available or unchanged. It is
             simply a hint that a client may use to determine a suitable polling interval to revalidate
             the service record contents.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceAvailability">
             <summary>
             The ServiceAvailability attribute is an 8-bit unsigned integer that represents the
             relative ability of the service to accept additional clients.
             [0x0008]
             </summary>
            <remarks>
             <para>[<c>8-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceAvailability attribute is an 8-bit unsigned integer that represents the
             relative ability of the service to accept additional clients. A value of 0xFF indicates
             that the service is not currently in use and is thus fully available, while a
             value of 0x00 means that the service is not accepting new clients. For services
             that support multiple simultaneous clients, intermediate values indicate the relative
             availability of the service on a linear scale.
             &#x201D;</para><para>&#x201C;
             For example, a service that can accept up to 3 clients should provide ServiceAvailability
             values of 0xFF, 0xAA, 0x55, and 0x00 when 0, 1, 2, and 3 clients, respectively,
             are utilizing the service. The value 0xAA is approximately (2/3) * 0xFF and
             represents 2/3 availability, while the value 0x55 is approximately (1/3)*0xFF and
             represents 1/3 availability. Note that the availability value may be approximated as
             &#x201D;</para><para>&#x201C;
             <c>( 1 - ( current_number_of_clients / maximum_number_of_clients ) ) * 0xFF</c>
             &#x201D;</para><para>&#x201C;
             When the maximum number of clients is large, this formula must be modified to
             ensure that ServiceAvailability values of 0x00 and 0xFF are reserved for their
             defined meanings of unavailability and full availability, respectively.
             &#x201D;</para><para>&#x201C;
             Note that the maximum number of clients a service can support may vary
             according to the resources utilized by the service's current clients.
             &#x201D;</para><para>&#x201C;
             A non-zero value for ServiceAvailability does not guarantee that the service will
             be available for use. It should be treated as a hint or an approximation of availability
             status.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BluetoothProfileDescriptorList">
             <summary>
             The BluetoothProfileDescriptorList attribute consists of a data element
             sequence in which each element is a profile descriptor that contains information
             about a Bluetooth profile to which the service represented by this service
             record conforms.
             [0x0009]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The BluetoothProfileDescriptorList attribute consists of a data element
             sequence in which each element is a profile descriptor that contains information
             about a Bluetooth profile to which the service represented by this service
             record conforms. Each profile descriptor is a data element sequence whose
             first element is the UUID assigned to the profile and whose second element is
             a 16-bit profile version number.
             &#x201D;</para><para>&#x201C;
             Each version of a profile is assigned a 16-bit unsigned integer profile version
             number, which consists of two 8-bit fields. The higher-order 8 bits contain the
             major version number field and the lower-order 8 bits contain the minor version
             number field. The initial version of each profile has a major version of 1 and a
             minor version of 0. When upward compatible changes are made to the profile,
             the minor version number will be incremented. If incompatible changes are
             made to the profile, the major version number will be incremented.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.DocumentationUrl">
             <summary>
             This attribute is a URL which points to documentation on the service described
             by a service record.
             [0x000A]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ClientExecutableUrl">
             <summary>
             This attribute contains a URL that refers to the location of an application that
             may be used to utilize the service described by the service record.
             [0x000B]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             <para>&#x201C;
             This attribute contains a URL that refers to the location of an application that
             may be used to utilize the service described by the service record. Since different
             operating environments require different executable formats, a mechanism
             has been defined to allow this single attribute to be used to locate an executable
             that is appropriate for the client device’s operating environment. In the
             attribute value URL, the first byte with the value 0x2A (ASCII character ‘*’) is to
             be replaced by the client application with a string representing the desired
             operating environment before the URL is to be used.
             &#x201D;</para><para>&#x201C;
             The list of standardized strings representing operating environments is contained
             in the Bluetooth Assigned Numbers document.
             &#x201D;</para><para>&#x201C;
             For example, assume that the value of the ClientExecutableURL attribute is
             http://my.fake/public/*/client.exe. On a device capable of executing SH3 WindowsCE
             files, this URL would be changed to http://my.fake/public/sh3-
             microsoft-wince/client.exe. On a device capable of executing Windows 98 binaries,
             this URL would be changed to http://my.fake/public/i86-microsoft-win98/
             client.exe.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.IconUrl">
             <summary>
             This attribute contains a URL that refers to the location of an icon that may be
             used to represent the service described by the service record.
             [0x000C]
             </summary>
            <remarks>
             <para>[<c>URL</c>]</para>
             <para>&#x201C;
             This attribute contains a URL that refers to the location of an icon that may be
             used to represent the service described by the service record. Since different
             hardware devices require different icon formats, a mechanism has been
             defined to allow this single attribute to be used to locate an icon that is appropriate
             for the client device. In the attribute value URL, the first byte with the
             value 0x2A (ASCII character ‘*’) is to be replaced by the client application with
             a string representing the desired icon format before the URL is to be used.
             &#x201D;</para><para>&#x201C;
             The list of standardized strings representing icon formats is contained in the
             Bluetooth Assigned Numbers document.
             &#x201D;</para><para>&#x201C;
             For example, assume that the value of the IconURL attribute is http://my.fake/
             public/icons/*. On a device that prefers 24 x 24 icons with 256 colors, this URL
             would be changed to http://my.fake/public/icons/24x24x8.png. On a device that
             prefers 10 x 10 monochrome icons, this URL would be changed to http://
             my.fake/public/icons/10x10x1.png.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceName">
             <summary>
             The ServiceName attribute is a string containing the name of the service represented
             by a service record.
             [0x0000 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             The ServiceName attribute is a string containing the name of the service represented
             by a service record. It should be brief and suitable for display with an
             Icon representing the service. The offset 0x0000 must be added to the attribute
             ID base (contained in the LanguageBaseAttributeIDList attribute) in order to
             compute the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription">
             <summary>
             This attribute is a string containing a brief description of the service.
             [0x0001 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             This attribute is a string containing a brief description of the service. It should
             be less than 200 characters in length. The offset 0x0001 must be added to the
             attribute ID base (contained in the LanguageBaseAttributeIDList attribute) in
             order to compute the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProviderName">
             <summary>
             This attribute is a string containing the name of the person or organization providing
             the service.
             [0x0002 + LangBaseAttrId]
             </summary>
            <remarks>
             <para>[<c>String</c>]</para>
             <para>&#x201C;
             This attribute is a string containing the name of the person or organization providing
             the service. The offset 0x0002 must be added to the attribute ID base
             (contained in the LanguageBaseAttributeIDList attribute) in order to compute
             the attribute ID for this attribute.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.AdditionalProtocolDescriptorLists">
             <summary>
             The AdditionalProtocolDescriptorLists attribute supports services that 
             require more channels in addition to the service described in the ProtocolDescriptorList
             attribute.  It contains a sequence of ProtocolDescriptorList-elements.
             [0x000D]
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c> or <c>Data Element Alternative</c>]</para>
             <para>Defined in Bluetooth version 2.1, SDP section 5.1.6.</para>
             <para>&#x201C;The AdditionalProtocolDescriptorLists attribute contains 
             a sequence of ProtocolDescriptorList-elements. Each element having the 
             same format as the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
             described in section 5.1.5. The ordering of the elements is
             significant and should be specified and fixed in Profiles that make use of this
             attribute.</para>
             <para>&#x201D;The AdditionalProtocolDescriptorLists attribute supports services that require
             more channels in addition to the service described in Section 5.1.5 . If the AdditionalProtocolDescriptorLists
             attribute is included in a service record, the ProtocolDescriptorList
             attribute must be included.&#x201D;
             </para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId">
            <summary>
            This service class describes service records that contain attributes of service
            discovery server itself.
            </summary>
            <remarks>
            <para>&#x201C;
            This service class describes service records that contain attributes of service
            discovery server itself. The attributes listed in this section are only valid if the
            ServiceClassIDList attribute contains the
            ServiceDiscoveryServerServiceClassID. Note that all of the universal attributes
            may be included in service records of the ServiceDiscoveryServer class.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x0202-0x02FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList">
             <summary>
             The VersionNumberList is a data element sequence in which each element of
             the sequence is a version number supported by the SDP server.
             </summary>
            <remarks>
             <para>[<c>Data Element Sequence</c>]</para>
             <para>&#x201C;
             The VersionNumberList is a data element sequence in which each element of
             the sequence is a version number supported by the SDP server.
             &#x201D;</para><para>&#x201C;
             A version number is a 16-bit unsigned integer consisting of two fields. The
             higher-order 8 bits contain the major version number field and the low-order 8
             bits contain the minor version number field. The initial version of SDP has a
             major version of 1 and a minor version of 0. When upward compatible changes
             are made to the protocol, the minor version number will be incremented. If
             incompatible changes are made to SDP, the major version number will be
             incremented. This guarantees that if a client and a server support a common
             major version number, they can communicate if each uses only features of the
             specification with a minor version number that is supported by both client and
             server.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.ServiceDatabaseState">
             <summary>
             The ServiceDatabaseState is a 32-bit integer that is used to facilitate caching
             of service records.
             </summary>
            <remarks>
             <para>[<c>32-bit unsigned integer</c>]</para>
             <para>&#x201C;
             The ServiceDatabaseState is a 32-bit integer that is used to facilitate caching
             of service records. If this attribute exists, its value is guaranteed to change
             when any of the other service records are added to or deleted from the server's
             database. If this value has not changed since the last time a client queried its
             value, the client knows that a) none of the other service records maintained by
             the SDP server have been added or deleted; and b) any service record handles
             acquired from the server are still valid. A client should query this attribute's
             value when a connection to the server is established, prior to using any service
             record handles acquired during a previous connection.
             &#x201D;</para><para>&#x201C;
             Note that the ServiceDatabaseState attribute does not change when existing
             service records are modified, including the addition, removal, or modification of
             service attributes. A service record's ServiceRecordState attribute indicates
             when that service record is modified.
             &#x201D;</para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId">
            <summary>
            This service class describes the ServiceRecord provided for each BrowseGroupDescriptor
             service offered on a Bluetooth device.
            </summary>
            <remarks>
            <para>&#x201C;
            This service class describes the ServiceRecord provided for each BrowseGroupDescriptor
             service offered on a Bluetooth device. The attributes listed in
            this section are only valid if the ServiceClassIDList attribute contains the BrowseGroupDescriptorServiceClassID.
            Note that all of the universal attributes may
            be included in service records of the BrowseGroupDescriptor class.
            &#x201D;</para>
            <para>&#x201C;Attribute IDs in the range of 0x0201-0x02FF are reserved.&#x201D;</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId">
             <summary>
             This attribute contains a UUID that can be used to locate services that are
             members of the browse group that this service record describes.
             </summary>
            <remarks>
             <para>[<c>UUID</c>]</para>
             </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId">
            <summary>
            Service Attribute IDs defined by the OBEX related specifications,
            i.e. Object Push and Synchronization Profiles specifications.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.GoepL2capPsm">
            <summary>
            GOEP L2Cap PSM
            </summary>
            <remarks>
            New in GOEP v2.0 but not numbered there.
            New in OPP v1.2, FTP v1.2, and BIP v1.1.
            <para>[<c>UInt16</c>]</para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedDataStoresList">
            <summary>
            Supported Data Stores List (Synchronization Profile)
            </summary>
            <remarks>
            Synchronization Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.IrMCSync"/> 
            service class.
            <para>[<c>Data Element Sequence of UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>0x01</term><description>Phonebook</description></item>
            <item><term>0x03</term><description>Calendar</description></item>
            <item><term>0x05</term><description>Notes</description></item>
            <item><term>0x06</term><description>Message</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFormatsList">
            <summary>
            Supported Formats List (Object Push Profile)
            </summary>
            <remarks>
            Object Push Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ObexObjectPush"/> 
            service class.
            <para>[<c>Data Element Sequence of UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>0x01</term><description>vCard 2.1</description></item>
            <item><term>0x02</term><description>vCard 3.0</description></item>
            <item><term>0x03</term><description>vCard 2.1</description></item>
            <item><term>0x04</term><description>vCal 1.0</description></item>
            <item><term>0x05</term><description>vNote</description></item>
            <item><term>0x06</term><description>vMessage</description></item>
            <item><term>0xFF</term><description>any type of object</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedCapabilities">
            <summary>
            Supported Capabilities (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt8</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>Generic imaging</description></item>
            <item><term>Bit 1</term><description>Capturing</description></item>
            <item><term>Bit 2</term><description>Printing</description></item>
            <item><term>Bit 3</term><description>Displaying</description></item>
            <item><term>Bit 4..7</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFeatures">
            <summary>
            Supported Features (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt16</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>ImagePush</description></item>
            <item><term>Bit 1</term><description>ImagePush-Store</description></item>
            <item><term>Bit 2</term><description>ImagePush-Print</description></item>
            <item><term>Bit 3</term><description>ImagePush-Display</description></item>
            <item><term>Bit 4</term><description>ImagePull</description></item>
            <item><term>Bit 5</term><description>AdvancedImagePrinting</description></item>
            <item><term>Bit 6</term><description>AutomaticArchive</description></item>
            <item><term>Bit 7</term><description>RemoteCamera</description></item>
            <item><term>Bit 8</term><description>RemoteDisplay</description></item>
            <item><term>Bit 9..15</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.SupportedFunctions">
            <summary>
            Supported Functions (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt32</c>]</para>
            <list type="table">
            Values
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>Bit 0</term><description>GetCapabilities</description></item>
            <item><term>Bit 1</term><description>PutImage</description></item>
            <item><term>Bit 2</term><description>PutLinkedAttachment</description></item>
            <item><term>Bit 3</term><description>PutLinkedThumbnail</description></item>
            <item><term>Bit 4</term><description>RemoteDisplay</description></item>
            <item><term>Bit 5</term><description>GetImagesList</description></item>
            <item><term>Bit 6</term><description>GetImageProperties</description></item>
            <item><term>Bit 7</term><description>GetImage</description></item>
            <item><term>Bit 8</term><description>GetLinkedThumbnail</description></item>
            <item><term>Bit 9</term><description>GetLinkedAttachment</description></item>
            <item><term>Bit 10</term><description>DeleteImage</description></item>
            <item><term>Bit 11</term><description>StartPrint</description></item>
            <item><term>Bit 12</term><description>Reserved</description></item>
            <item><term>Bit 13</term><description>StartArchive</description></item>
            <item><term>Bit 14</term><description>GetMonitoringImage</description></item>
            <item><term>Bit 16</term><description>GetStatus</description></item>
            <item><term>Bit 15, 17..31</term><description>Reserved</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId.TotalImagingDataCapacity">
            <summary>
            Total Imaging Data Capacity (BIP)
            </summary>
            <remarks>
            Basic Imaging Profile &#x2014; 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.Imaging"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingResponder"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingAutomaticArchive"/>, 
            <see cref="F:InTheHand.Net.Bluetooth.BluetoothService.ImagingReferenceObjects"/> 
            service classes.
            <para>[<c>UInt64</c>]</para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Basic Printing Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DocumentFormatsSupported">
            <summary>
            Document Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.CharacterRepertoiresSupported">
            <summary>
            Character Repertoires Supported
            </summary>
            <remarks>[<c>UInt128</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.XhtmlPrintImageFormatsSupported">
            <summary>
            XHTML-Print Image Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ColorSupported">
            <summary>
            Color Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.Model1284Id">
            <summary>
            1284ID
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterName">
            <summary>
            Printer Name
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterLocation">
            <summary>
            Printer Location
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DuplexSupported">
            <summary>
            Duplex Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MediaTypesSupported">
            <summary>
            Media Types Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MaxMediaWidth">
            <summary>
            MaxMediaWidth
            </summary>
            <remarks>[<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.MaxMediaLength">
            <summary>
            MaxMediaLength
            </summary>
            <remarks>[<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.EnhancedLayoutSupported">
            <summary>
            Enhanced Layout Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.RuiFormatsSupported">
            <summary>
            RUI Formats Supported
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ReferencePrintingRuiSupported">
            <summary>
            Reference Printing RUI Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DirectPrintingRuiSupported">
            <summary>
            Direct Printing RUI Supported
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.ReferencePrintingTopUrl">
            <summary>
            Reference Printing Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DirectPrintingTopUrl">
            <summary>
            Direct Printing Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.PrinterAdminRuiTopUrl">
            <summary>
            Printer Admin RUI Top URL
            </summary>
            <remarks>[<c>URL</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId.DeviceName">
            <summary>
            Device Name
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Personal Area Networking Profile specification.
            </summary>PersonalAreaNetworkingProfile
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.SecurityDescription">
            <summary>
            Security Description
            </summary>
            <remarks>&#x201C;Security Description&#x201D; [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.NetAccessType">
            <summary>
            NetAccessType
            </summary>
            <remarks>&#x201C;Type of Network Access Available&#x201D; [<c>UInt16</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.MaxNetAccessRate">
            <summary>
            MaxNetAccessRate
            </summary>
            <remarks>&#x201C;Maximum possible Network Access Data Rate&#x201D; [<c>UInt32</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.IPv4Subnet">
            <summary>
            IPv4Subnet
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.PersonalAreaNetworkingProfileAttributeId.IPv6Subnet">
            <summary>
            IPv6Subnet
            </summary>
            <remarks>[<c>String</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HeadsetProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Headset Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HeadsetProfileAttributeId.RemoteAudioVolumeControl">
            <summary>
            Remote audio volume control
            </summary>
            <remarks>[<c>Boolean</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId">
            <summary>
            Service Attribute IDs defined by the Hand-Free Profile specification.
            </summary>HandFreeProfile
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId.Network">
            <summary>
            Network
            </summary>
            <remarks>
            <para>&#x201C;The "Network" attribute states, if the AG has the capability 
            to reject incoming calls[4]. This attribute is not encoded as a data element 
            sequence; it is simply an 8-bit unsigned integer. The information given 
            in the “Network” attribute shall be the same as the information given 
            in Bit 5 of the unsolicited result code +BRSF (see Section 4.24.3). An 
            attribute value of 0x00 is translated to a bit value of 0; an attribute 
            value of 0x01 is translated to a bit value of 1.&#x201D;
            </para>
            [<c>UInt8</c>]
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HandsFreeProfileAttributeId.SupportedFeatures">
            <summary>
            SupportedFeatures
            </summary>
            <remarks>
            <para>&#x201C;The attribute &#x201C;SupportedFeatures&#x201D; states the features 
            supported in each device. &#x2026;
            The set of features supported in each case is bit-wise defined in this 
            attribute on a yes/no basis. The mapping between the features and their 
            corresponding bits within the attribute is listed below in for the HF 
            and in for the AG. &#x2026;
            <code lang="none">
            Bit     Feature                                                     Default in HF
            (0=LSB)
            0       EC and/or NR function (yes/no, 1 = yes, 0 = no)             0
            1       Call waiting and three way calling(yes/no, 1 = yes, 0 = no) 0
            2       CLI presentation capability (yes/no, 1 = yes, 0 = no)       0
            3       Voice recognition activation (yes/no, 1= yes, 0 = no)       0
            4       Remote volume control (yes/no, 1 = yes, 0 = no)             0
            </code>
            <para>Table 5.2 “SupportedFeatures” attribute bit mapping for the HF</para>
            <code lang="none">
            Bit     Feature                                             Default in AG
            (0=LSB)
            0       Three-way calling (yes/no, 1 = yes, 0 = no)         1
            1       EC and/or NR function (yes/no, 1 = yes, 0 = no)     0
            2       Voice recognition function (yes/no, 1 = yes, 0 = no)    0
            3       In-band ring tone capability (yes/no, 1 = yes, 0 = no)  1
            4       Attach a phone number to a voice tag (yes/no, 1 = yes, 0 = no)  0
            </code>
            Table 5.4 “SupportedFeatures” attribute bit mapping for the AG&#x201D;
            </para>
            [<c>UInt16</c>]</remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId">
            <summary>
            Service Attribute IDs defined by the Health Device Profile specification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.SupportFeaturesList">
            <summary>
            SupportFeaturesList
            </summary>
            -
            <remarks>
            <para>"This is a sequence for which each element is a sequence that
            describes a single application data end-point on the device. The
            Supported Features attribute (MDEP List) provides an indication of
            the data types that an MDEP supports.",
            "...each description is itself a sequence of three or more elements."
            </para>
            <c>[Sequence]</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.DataExchangeSpecification">
            <summary>
            DataExchangeSpecification
            </summary>
            -
            <remarks>
            <para>"This attribute is a one-byte reference, with the value taken
            from the Bluetooth Assigned Numbers [3] to identify the Data Exchange
            Protocol used (e.g. ISO/IEEE 11073-20601 specification)."
            e.g. value 0x01 is ISO/IEEE 11073-20601, "Health informatics - Personal
            health device communication - Application profile - Optimized exchange
            protocol"
            </para>
            <c>[UInt8]</c>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.AttributeIds.HealthDeviceAttributeId.McapSupportedProcedures">
            <summary>
            MCAP Supported Procedures
            </summary>
            -
            <remarks>
            <para>"This attribute is a one byte bit-mask that indicates the MCAP
            procedures that are supported by this HDP service."
            </para>
            <code lang="none">
            0x02  Supports Reconnect Initiation 3
            0x04  Supports Reconnect Acceptance 4
            0x08  Supports Clock Synchronization Protocol (includes support for at least Sync-Slave Role)
            0x10  Supports Sync-Master Role
            </code>
            <c>[UInt8]</c>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.BluetoothProtocolDescriptorType">
            <summary>
            Configures what type of element will be added by the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/>
            for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/> 
            attribute.
            </summary>
            -
            <remarks><para>Used with the <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.BluetoothProtocolDescriptorType.None">
            <summary>
            No PDL attribute will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.BluetoothProtocolDescriptorType.L2Cap">
            <summary>
            A standard L2CAP element will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.BluetoothProtocolDescriptorType.Rfcomm">
            <summary>
            A standard RFCOMM element will be added.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.BluetoothProtocolDescriptorType.GeneralObex">
            <summary>
            A standard GOEP (OBEX) element will be added.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ElementTypeDescriptor">
            <summary>
            Represents the type of the element in the SDP record binary format, 
            and is stored as the higher 5 bits of the header byte.
            </summary>
            <remarks>
            There is an identifier for each major type: String vs UUID vs unsigned integer.
            There are various sizes of UUID and integer type for instance, the resultant
            types are listed in enum <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.SizeIndex">
            <summary>
            Represents the size of the SDP element in the record binary format,
            and is stored as the lower 3 bits of the header byte.
            </summary>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ElementType">
            <summary>
            Represents the types that an SDP element can hold.
            </summary>
            <remarks>
            <para>
            (Is a logical combination of the <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>
            field which defines the major type and the size field in the binary format; and
            the size field being made up of the <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>
            field and any additional length bytes.
            </para>
            <para>Note, the values here are not the numerical bitwise combination of the 
            <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and 
            <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> fields as they appear 
            in the encoded protocol.  It was simpler to assign arbitrary values here as 
            firstly we wanted zero to be the 'Unknown' value, which conflicts with Nil's
            bitwise value; but also because the TextString, sequence and Url types can 
            have various SizeIndex values and thus they wouldn&#x2019;t be easily 
            representable by one value here).
            </para>
            </remarks>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.MapServiceClassToAttributeIdList">
            <summary>
            Gets a list of enum-like classes containing SDP Service Attribute Id definitions 
            for a particular Service Class.
            </summary>
            -
            <remarks>
            See method 
            <see cref="M:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList.GetAttributeIdEnumTypes(InTheHand.Net.Bluetooth.ServiceRecord)"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.MapServiceClassToAttributeIdList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.MapServiceClassToAttributeIdList.GetAttributeIdEnumTypes(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Get a list of enum-like classes containing Service Attribute Id definitions 
            for the type of the Service Class contained in the given Service Record.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            whose <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            element will be retrieved, and its Service Class Id will used
            for the lookup.
            </param>
            -
            <returns>
            An array of <see cref="T:System.Type"/> each of which is a enum-like class 
            which defines the set of Service Attribute IDs used by a particular 
            Service Class e.g. ObjectPushProfile.
            An empty array will be returned if none of the Service Classes
            are known, or the record contains no 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute, or it is invalid.
            <note>Currently only the first Service Class Id is looked-up.</note>
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="record"/> is null.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.MapServiceClassToAttributeIdList.GetAttributeIdEnumType(InTheHand.Net.Bluetooth.Sdp.ServiceElement)">
            <summary>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class contained in the given 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            (type <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Uuid"/>) data element.
            </summary>
            -
            <param name="idElement">A <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            of 'UUID' type containing the Service Class to search for.
            </param>
            -
            <returns>
            A <see cref="T:System.Type"/> object representing the enum-like class
            holding the Attribute Id definitions, or null if the Service Class is
            unknown or the element is not of <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Uuid"/>
            type.
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="idElement"/> is null.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.MapServiceClassToAttributeIdList.GetAttributeIdEnumType(System.Guid)">
            <overloads>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class specified.
            </overloads>
            -
            <summary>
            Get the enum-like class containing the Service Attribute Id definitions 
            for the type of the Service Class specified by UUID.
            </summary>
            -
            <param name="uuid">The Service Class to search for, as a <see cref="T:System.Guid"/>.
            </param>
            -
            <returns>
            A <see cref="T:System.Type"/> object representing the enum-like class
            holding the Attribute Id definitions, or null if the Service Class is
            unknown.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceAttribute">
            <summary>
            Holds an attribute from an SDP service record.
            </summary>
            -
            <remarks>
            Access its SDP Data Element through the 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/> property and read the 
            data value through the methods and properties on the returned 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceAttribute.#ctor(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,InTheHand.Net.Bluetooth.Sdp.ServiceElement)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> class.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="value">The value as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceAttribute.#ctor(System.UInt16,InTheHand.Net.Bluetooth.Sdp.ServiceElement)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> class.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:System.UInt16"/>.</param>
            <param name="value">The value as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceAttribute.Id">
            <summary>
            Get the Attribute Id for this attribute.
            </summary>
            -
            <remarks>
            <note >Id is a <em>unsigned</em> 32-bit integer but we use return it
            is a <em>signed</em> 32-bit integer for CLS Compliance reasons.  It
            should not thus be used for ordering etc, for example 0xFFFF will sort
            before 0x0001 which is backwards.
            </note>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceAttribute.IdAsOrdinalNumber">
            <summary>
            Get the Attribute Id as a number, e.g. for comparison.
            </summary>
            -
            <remarks>
            <para>Property <see cref="P:Id"/> should be used as an identifier,
            but not as a number.  That#x2019;s because the range is <em>unsigned</em>
            32-bit integer but we use return it is a <em>signed</em> 32-bit integer.
            Thus an example list will sort as { 0xFFFF, 0x8001, 0x0001, 0x0302 }
            when it should sort as { 0x0001, 0x0302, 0x8001,0xFFFF }
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceAttribute.Value">
            <summary>
            Get the value of this attributes as a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceElement">
             <summary>
             Holds an SDP data element.
             </summary>
             -
             <remarks>
             <para>A Service Element hold the data in a SDP Service Record.  It can 
             hold various types of data, being like the &#x2018;variant&#x2019; type in some
             environments.  Each <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> in
             a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> holds its content in a
             Service Element.
             </para>
             <para>The types currently defined in the Service Discovery specification
             include unsigned and signed integers 
             of various sizes (8-bit, 16-bit etc), UUIDs in the full 128-bit form or
             in the 16 and 32-bit forms, TextString, Url etc.  An element can itself
             also contain a list of element, either as a &#x2018;sequence&#x2019; or an
             &#x2018;alternative&#x2019;, and thus an attribute can contain a tree of values,
             e.g. as used by the 
             <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
             attribute.
             </para>
             <para>The type that an element is holding can be accessed with the 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.ElementTypeDescriptor"/> and 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.ElementType"/> properties which
             are of type <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and
             <see cref="T:InTheHand.Net.Bluetooth.ElementType"/> respectively, the former being 
             the &#x2018;major&#x2019; type e.g. 
             <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.UnsignedInteger"/>, and
             the latter the &#x2018;minor&#x2019; type e.g. 
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt16"/>.
             </para>
             <para>The element's value can be accessed in various ways, either directly 
             in its internal form through its <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/>
             property.  It has return type <see cref="T:System.Object"/> so the value 
             will have to be cast before use, see the <c>UInt16</c> example below.  There
             are also a number of type-specific methods, e.g. 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray"/>,
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
             etc.  Each will throw an <see cref="T:System.InvalidOperationException"/>
             if the element is not of a suitable type.  The complete set is:</para>
             <list type="table">
             <listheader><term><see cref="T:InTheHand.Net.Bluetooth.ElementType"/></term>
             <description>Access method, or .NET Type for direct access</description>
             </listheader>
             <item><term><c>Nil</c></term>
             <description><see langword="null"/></description></item>
             
             <item><term><c>Uint8</c></term><description><see cref="T:System.Byte"/></description></item>
             <item><term><c>Uint16</c></term><description><see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uint32</c></term><description><see cref="T:System.UInt32"/></description></item>
             <item><term><c>Uint64</c></term><description>Currently unsupported.</description></item>
             <item><term><c>Uint128</c></term><description>Currently unsupported.</description></item>
             
             <item><term><c>Int8</c></term><description><see cref="T:System.SByte"/></description></item>
             <item><term><c>Int16</c></term><description><see cref="T:System.Int16"/></description></item>
             <item><term><c>Int32</c></term><description><see cref="T:System.Int32"/></description></item>
             <item><term><c>Int64</c></term><description>Currently unsupported.</description></item>
             <item><term><c>Int128</c></term><description>Currently unsupported.</description></item>
            
             <item><term><c>Uuid16</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, or as <see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uuid32</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, or as <see cref="T:System.UInt16"/></description></item>
             <item><term><c>Uuid128</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/></description></item>
             
             <item><term><c>TextString</c></term><description>With 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
             or <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8"/> etc.
             The underlying value can be an array of bytes, or as a <see cref="T:System.String"/>
             the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/> will set an
             array of bytes, whereas a manually created record will likely contain a
             <see cref="T:System.String"/>.
             </description></item>
             
             <item><term><c>Boolean</c></term><description><see cref="T:System.Boolean"/></description></item>
             
             <item><term><c>ElementSequence</c></term><description>With
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementArray"/> or
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList"/>
             </description></item>
             <item><term><c>ElementSequence</c></term><description>-"-</description></item>
            
             <item><term><c>Url</c></term><description>Via <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri"/>,
             can be stored interally as <see cref="T:System.Uri"/> or as an array of bytes
             </description></item>
             </list>
             
             <para>Note that there are no access 
             methods for the numeric type for instance so the 
             <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/> property will have
             to be used e.g.
             <code lang="C#">
             // ElementType is UInt16
             ushort x = (ushort)element.Value;
             </code>
             or
             <code lang="C#">
             // ElementType is UInt16
             Dim x As UShort = CUShort(element.Value);
             </code>
             </para>
             <para>Additional type-specific methods can be added as required, in fact the 
             full set of 19+ could be added, it just requires implementation and test&#x2026;
             </para>
             </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.#ctor(InTheHand.Net.Bluetooth.Sdp.ElementType,System.Object)">
             <overloads>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
             </overloads>
             -
             <summary>
             Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
             </summary>
             -
             <remarks>
             <para>The type of the object passed in the <paramref name="value"/> parameter
             <strong>must</strong> suit the type of the element.  For instance if the element type is 
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/> then the object
             passed in must be a <see cref="T:System.Byte"/>, if the element type is
             <see cref="F:InTheHand.Net.Bluetooth.ElementType.TextString"/> then the object
             must either be a <see cref="T:System.String"/> or the string encoded as 
             an array of <see cref="T:System.Byte"/>, 
             and if the element type is <see cref="F:InTheHand.Net.Bluetooth.ElementType.Uuid16"/>
             then the object passed in must be a <see cref="T:System.UInt16"/>,
             etc.
             For the full list of types see the class level documentation 
             (<see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>).
             </para>
             <para>For numerical element types the 
             <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
             factory method will accept any integer type and attempt to convert it to the 
             required type before creating the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>,
             for example for element type <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/> 
             it will accept an <see cref="T:System.Int32"/> parameter and convert
             it to a <see cref="T:System.Byte"/> internally.
             </para>
             </remarks>
             -
             <param name="type">The type of the element as an ElementType.
             </param>
             <param name="value">The value for the new element,
             <strong>must</strong> suit the type of the element.
             See the remarks for more information.
             </param>
             -
             <example>
             <code lang="C#">
             ServiceElement e
             e = new ServiceElement(ElementType.TextString, "Hello world");
             e = new ServiceElement(ElementType.TextString, new byte[] { (byte)'h', (byte)'i', });
             e = new ServiceElement(ElementType.Uuid16, (UInt16)0x1101);
            
            
             int i = 10;
             int j = -1;
             
             // Error, Int32 not suitable for element type UInt8.
             ServiceElement e0 = new ServiceElement(ElementType.UInt8, i);
             
             // Success, Byte value 10 stored.
             ServiceElement e1 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, i);
             
             // Error, -1 not in range of type Byte.
             ServiceElement e2 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, j);
             </code>
             </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.#ctor(InTheHand.Net.Bluetooth.Sdp.ElementType,System.Collections.Generic.IList{InTheHand.Net.Bluetooth.Sdp.ServiceElement})">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
            -
            <param name="type">The type of the element as an ElementType.
            Should be either <c>ElementSequence</c>/<c>ElementAlternative</c> types.
            </param>
            <param name="childElements">A list of elements.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.#ctor(InTheHand.Net.Bluetooth.Sdp.ElementType,InTheHand.Net.Bluetooth.Sdp.ServiceElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
            -
            <param name="type">The type of the element as an ElementType.
            Should be either <c>ElementSequence</c>/<c>ElementAlternative</c> types.
            </param>
            <param name="childElements">A list of elements.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.#ctor(InTheHand.Net.Bluetooth.Sdp.ElementTypeDescriptor,InTheHand.Net.Bluetooth.Sdp.ElementType,System.Object)">
            <summary>
            Obsolete, use <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)"/> instead.
            Initializes a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.Sdp.ElementType,System.Object)">
            <summary>
            Create an instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            but internally converting the numeric value to the required type.
            </summary>
            -
            <remarks>
            <para>As noted in the constructor documentation 
            (<see cref="M:InTheHand.Net.Bluetooth.ServiceElement.#ctor(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>)
            the type of the value supplied <strong>must</strong> exactly match the element's natural type,
            the contructor will return an error if that is not the case. This method 
            will instead attempt to convert the value to the required type.  It uses 
            the <see cref="T:System.IConvertible"/> interface to do the conversion, for
            instance if the element type is <c>Uint16</c> then it will cast the input value
            to <see cref="T:System.IConvertible"/> and call 
            <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/> on it.
            If the value is not convertible to the element type then an 
            <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown see below.
            </para>
            <para>For instance, passing in an C# <c>int</c> / Visual Basic <c>Integer</c>
            to the constructor will fail for element types <see cref="F:InTheHand.Net.Bluetooth.ElementType.UInt8"/>
            etc, however by using this method it will succeed if the value is in the
            correct range.
            For example
            <code lang="C#">
            int i = 10;
            int j = -1;
            
            // Error, Int32 not suitable for element type UInt8.
            ServiceElement e0 = new ServiceElement(ElementType.UInt8, i);
            
            // Success, Byte value 10 stored.
            ServiceElement e1 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, i);
            
            // Error, -1 not in range of type Byte.
            ServiceElement e2 = ServiceElement.CreateNumericalServiceElement(ElementType.UInt8, j);
            </code>
            The last example failing with:
            <code lang="none">
            System.ArgumentOutOfRangeException: Value '-1'  of type 'System.Int32' not valid for element type UInt16.
             ---> System.OverflowException: Value was either too large or too small for a UInt16.
               at System.Convert.ToUInt16(Int32 value)
               at System.Int32.System.IConvertible.ToUInt16(IFormatProvider provider)
               at InTheHand.Net.Bluetooth.ServiceElement.ConvertNumericalValue(ElementType elementType, Object value)
               --- End of inner exception stack trace ---
               at InTheHand.Net.Bluetooth.ServiceElement.ConvertNumericalValue(ElementType elementType, Object value)
               at InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(ElementType elementType, Object value)
               at MiscFeatureTestCs.Main(String[] args)
            </code>
            </para>
            </remarks>
            -
            <param name="elementType">The type of the element as an ElementType.
            Should be one of the <c>UnsignedInteger</c>/<c>TwosComplementInteger</c> types.
            </param>
            <param name="value">The value for the new element,
            should be a numerical type.
            </param>
            -
            <returns>The new element.
            </returns>
            -
            <exception cref="T:System.ArgumentException">
            The <paramref name="elementType"/> is not a numerical type.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value wasn&#x2019;t convertible to the required type, e.g. if -1 is
            passed for element type UInt8, as shown above.
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ElementType">
            <summary>
            Gets the type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ElementTypeDescriptor">
            <summary>
            Gets the SDP Element Type Descriptor of the element
            as an <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceElement.Value">
            <summary>
            Gets the value of the element as the .NET type it is stored as.
            </summary>
            <remarks>
            In most cases the type-specific property should be used instead, e.g 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsElementList"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUri"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsUuid"/>, etc.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsElementList">
            <summary>
            Gets the value as a list of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </summary>
            -
            <returns>The list of elements as an list.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>
            or <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementAlternative"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsElementArray">
            <summary>
            Gets the value as a array of <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </summary>
            -
            <returns>The list of elements as an array.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementSequence"/>
            or <see cref="F:InTheHand.Net.Bluetooth.ElementType.ElementAlternative"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsUri">
            <summary>
            Gets the value as a <see cref="T:System.Uri"/>.
            </summary>
            -
            <returns>The Url value as a <see cref="T:System.Uri"/>.
            </returns>
            -
            <remarks>
            <para>It turns out that we can't trust vendors to add only valid
            URLs to their records, for instance the iPhone has an attribute
            with value "www.apple.com" which isn't a URL as it has no scheme
            part (http://) etc.
            </para>
            <para>Thus a Url value in an element can be stored in a number of
            formats.  If created by the parser then it will be stored as a 
            <see cref="T:System.String"/> or as an array of
            <see cref="T:System.Byte"/> if property
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation">ServiceRecordParser.LazyUrlCreation</see>
            is set.  If created locally it can be those types or also 
            <see cref="T:System.Uri"/> .
            </para>
            <para>This method will try to convert from those formats to <see cref="T:System.Uri"/>.
            If the URL is invalid e.g. has bad characters or is missing the scheme
            part etc then an error will occur.  One can instead access the
            element's <see cref="P:InTheHand.Net.Bluetooth.ServiceElement.Value"/>
            property and expect one of the three types.  When created by the 
            parser it will be of type <see cref="T:System.String"/> unless 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.LazyUrlCreation"/>
            is set.
            </para>
            </remarks>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.Url"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsUuid">
            <summary>
            Gets the value as a <see cref="T:System.Guid"/>.
            </summary>
            -
            <returns>The UUID value as a <see cref="T:System.Guid"/>.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type
            <c>ElementType</c>.<see cref="F:InTheHand.Net.Bluetooth.ElementType.Uuid128"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsString(System.Text.Encoding)">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            where it is encoded using the given encoding form.
            </summary>
            -
            <param name="encoding">The <see cref="T:System.Text.Encoding"/>
            object to be used to decode the string value
            if it has been read as a raw byte array.
            </param>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsString(InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem)">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            when it is encoded as specified by the given IETF Charset identifer.
            </summary>
            -
            <remarks>
            Note that a strict decoding of the string is carried out 
            (except on the NETCF where it is not supported). 
            Thus if the value is not in the specified encoding, or has been
            encoded incorrectly, then an error will occur.
            </remarks>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the given encoding.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceElement.GetValueAsStringUtf8">
            <summary>
            Get the value of the <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>,
            when it is encoded as UTF-8.
            </summary>
            -
            <remarks>
            Note: a strict decoding is used.
            Thus if the value is not in UTF-8 encoding or has been
            encoded incorrectly an error will occur.
            </remarks>
            -
            <returns>
            A <see cref="T:System.String"/> holding the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            from the service element.
            </returns>
            -
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the given encoding.
            On NETCF, an <see cref="T:System.ArgumentException"/> is thrown; not that
            <see cref="T:System.ArgumentException"/> is the base class of the
            <see cref="T:System.Text.DecoderFallbackException"/> exception.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgNotUuidType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgNotTextStringType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgNotUrlType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgNotSeqAltType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgSeqAltTypeNeedElementArray">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgFmtCreateNumericalGivenNonNumber">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceElement.ErrorMsgListContainsNotElement">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecord">
            <summary>
            Holds an SDP service record.
            </summary>
            -
            <remarks>
            <para>A Service Record is the top-level container in the Service Discovery
            protocol/database.  It contains a list of Service Attributes each identified 
            by a numerical identifier (its <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>),
            and with its data held in a <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> has methods to access the
            various types of data it contains.
            </para>
            <para>The content of the record for a particular service class is defined in the
            profile&#x2019;s specification along with the IDs it uses. The IDs for the 
            common standard services have beed defined here, as e.g. 
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ObexAttributeId"/>,
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BasicPrintingProfileAttributeId"/>,
            etc. The Service Discovery profile itself defines IDs, some that can be used 
            in any record <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId"/>, 
            and others
            <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>,
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>.
            </para>
            <para>Note that except for the attributes in the &#x201C;Universal&#x201D; category 
            the IDs are <i>not</i> unique, for instance the ID is 0x0200 for both 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId.VersionNumberList"/>
            and <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId.GroupId"/>
            from <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.ServiceDiscoveryServerAttributeId"/>
            and <see cref="T:InTheHand.Net.Bluetooth.AttributeIds.BrowseGroupDescriptorAttributeId"/>
            respectively.
            </para>
            <para><see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> provides the normal 
            collection-type methods properties e.g. 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecord.Count"/>, 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.Contains(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecord.Item(System.Int32)"/>
            and <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetEnumerator"/>.  So, to 
            access a particular attribute&#x2019;s content get the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> using one of those methods 
            and then read the data from the <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>. 
            See the example below.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>The SDP specification defines the content of <c>TextString</c> element
            type very loosely and they are thus very difficult to handle when reading 
            from a record.
            The encoding of the string content is
            not set in the specification, and thus implementors are free to use any 
            encoding they fancy, for instance ASCII, UTF-8, 
            UTF-16, Windows-1252, etc &#x2014; all of which have been seen in record 
            from real devices.  It would have been much more sensible to mandate UTF-8 
            as the other part of the Bluetooth protocol suite do e.g. the PIN is always
            stored as a UTF-8 encoded string.
            </para>
            <para>Not only that but some of the attributes defined in the SDP specification
            can be included in more than one &#x2018;natural language&#x2019; version,
            and the definition of the language and the string&#x2019;s encoding
            is not included in the element, but is 
            instead defined in a separate element and the ID of the string attribute
            modified.  Yikes!
            </para>
            <para>  This makes it near impossible to decode the bytes in
            a string element at parse time and create the string object then.  Therefore
            the parser creates an element containing the raw bytes from the string which
            hopefully the user will know how to decode, passing the required encoding 
            information to one of methods on the element i.e.
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(InTheHand.Net.Bluetooth.LanguageBaseItem)"/>,
            which takes a multi-language-base item from the same record (see e.g.
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>),
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsString(System.Text.Encoding)"/>
            which takes a .NET <see cref="T:System.Text.Encoding"/> object,
            or <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.GetValueAsStringUtf8"/>,
            or <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>
            on the record which again takes a multi-language-base item.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>A Service Record can be created from the source byte array by using the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
            method or the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            on <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/>.  A record
            can also be created from a list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            passed to the constructor 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.#ctor(System.Collections.Generic.IList{InTheHand.Net.Bluetooth.ServiceAttribute})"/>.
            </para>
            
            <para>&#xA0;
            </para>
            
            <para>From the SDP specification:
            </para>
            <list type="bullet">
            <item><term>2.2 ServiceRecord </term><description>&#x201C;&#x2026;
            a list of service attributes.&#x201D;</description></item>
            <item><term>2.3 ServiceAttribute</term><description>&#x201C;&#x2026;
            two components: an attribute id and an attribute value.&#x201D;</description></item>
            <item><term>2.4 Attribute ID</term><description>&#x201C;&#x2026;
            a 16-bit unsigned integer&#x201D;,
            &#x201C;&#x2026;represented as a data element.&#x201D;</description></item>
            <item><term>2.5 Attribute Value</term><description>&#x201C;&#x2026;
            a variable length field whose meaning is determined by the attribute ID&#x2026;&#x201D;,
            &#x201C;&#x2026;represented by a data element.&#x201D;</description></item>
            <item><term>3.1 Data Element</term><description>&#x201C;&#x2026;
            a typed data representation.
            It consists of two fields: a header field and a data field.
            The header field, in turn, is composed of two parts: a type descriptor and a size descriptor.
            &#x201D;</description></item>
            <item><term>3.2 Data Element Type Descriptor </term><description>&#x201C;&#x2026;
            a 5-bit type descriptor.&#x201D;</description></item>
            <item><term>3.3 Data Element Size Descriptor </term><description>&#x201C;&#x2026;
            The data element size descriptor is represented as a
            3-bit size index followed by 0, 8, 16, or 32 bits.&#x201D;</description></item>
            </list>
            </remarks>
            -
            <example>
            <code lang="C#">
            ServiceRecord record = ...
            ServiceAttribute attr = record.GetAttributeById(UniversalAttributeId.ServiceRecordHandle);
            ServiceElement element = attr.Value;
            if(element.ElementType != ElementType.UInt32) {
              throw new FooException("Invalid record content for ServiceRecordHandle");
            }
            UInt32 handle = (UInt32)element.Value;
            </code>
            or
            <code lang="VB.NET">
            Dim bppRecord As ServiceRecord = ...
            Dim attr As ServiceAttribute = bppRecord.GetAttributeById(BasicPrintingProfileAttributeId.PrinterName)
            Dim element As ServiceElement = attr.Value;
            ' Spec say it is in UTF-8
            Dim printerName As String = element.GetValueAsStringUtf8()
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            containing no <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.#ctor(System.Collections.Generic.IList{InTheHand.Net.Bluetooth.Sdp.ServiceAttribute})">
            <overloads>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class.
            </overloads>
            ----
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            with the specified set of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <param name="attributesList">The list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            to add to the record,
            as an <see cref="T:System.Collections.Generic.IList`1"/>
            of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.#ctor(InTheHand.Net.Bluetooth.Sdp.ServiceAttribute[])">
            <summary>
            Initializes a new instance of the 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> class 
            with the specified set of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <param name="attributesList">The list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            to add to the record,
            as an array of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])">
            <summary>
            Create a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> by parsing
            the given array of <see cref="T:System.Byte"/>.
            </summary>
            -
            <remarks>This uses the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/>
            with its default settings.
            See <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            for more information.  In particular for the errors that can result, two
            of which are listed here.
            </remarks>
            -
            <param name="recordBytes">A byte array containing the encoded Service Record.
            </param>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecord"/> parsed from the byte array.
            </returns>
            -
            <exception cref="T:System.Net.ProtocolViolationException">
            The record contains invalid content.
            </exception>
            <exception cref="T:System.NotImplementedException">
            The record contains an element type not supported by the parser.
            </exception>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.Count">
            <summary>
            Gets the count of attributes in the record.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            -
            <param name="index">The zero-based index of the attribute to get.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute at the specified index.</returns>
            -
            <exception cref="T:System.Exception">
            <para>index is less than 0.</para>
            <para>-or-</para>
            <para>index is equal to or greater than Count. </para>
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetAttributeByIndex(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            -
            <param name="index">The zero-based index of the attribute to get.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute at the specified index.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>index is less than 0.</para>
            <para>-or-</para>
            <para>index is equal to or greater than Count. </para>
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.Contains(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <overloads>
            Determines whether a service attribute with the specified ID, 
            and optional natural language, is in the List.
            </overloads>
            -
            <summary>
            Determines whether a service attribute with the specified ID is in the List.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <returns>true if item is found in the record; otherwise, false. </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <overloads>
            Returns the attribute with the given ID.
            </overloads>
            -
            <summary>
            Returns the attribute with the given ID.
            </summary>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute with the specified ID.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.AttributeIds">
            <summary>
            Get a list of the numerical IDs of the Attributes in the record 
            as an <see cref="T:System.Collections.Generic.IList`1"/>
            of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.
            </summary>
            -
            <remarks>
            This method will likely be only rarely used: instead 
            one would generally want either to read a specific attribute using 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/>,
            or read every attribute by using 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>'s
            <c>IEnumerable</c> ability e.g.
            <code lang="VB.NET">
               For Each curAttr As ServiceAttribute In record
                  If curAttr.Id = UniversalAttributeId.ProtocolDescriptorList Then
                  ...
               Next
            </code>
            <para>Note, for NETCFv1 this returns an instance of the non-Generic list 
            <see cref="T:System.Collections.IList"/>.
            </para>
            </remarks>
            -
            (Provide a pure example since NDocs makes big mess of displaying Generic types).
            <example>
            In C#:
            <code lang="C#">
              IList&lt;ServiceAttributeId&gt; ids = record.GetAttributeIds();
            </code>
            In VB.NET:
            <code lang="VB.NET">
              Dim ids As IList(Of ServiceAttributeId) = record.GetAttributeIds()
            </code>
            Or without Generics in .NET 1.1 (NETCFv1) in VB.NET:
            <code lang="VB.NET">
              Dim ids As IList = record.GetAttributeIds()
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.Contains(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem)">
            <summary>
            Determines whether a TextString service attribute with the specified ID 
            and natural language 
            is in the List.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <returns>true if item is found in the record; otherwise, false. </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem)">
            <summary>
            Returns the attribute with the given ID and natural language.
            </summary>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> holding 
            the attribute with the specified ID and language.
            Is never <see langword="null"/>.
            </returns>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id with the given language base in the record.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.CreateLanguageBasedAttributeId(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <summary>
            Create the attribute id resulting for adding the language base attribute id.
            </summary>
            -
            <returns>The result <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</returns>
            -
            <exception cref="T:System.OverflowException">
            <paramref name="baseId"/> added to the <paramref name="id"/>
            would create an id that cannot be represented as an Attribute Id.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,InTheHand.Net.Bluetooth.AttributeIds.LanguageBaseItem)">
            <summary>
            Gets a <see cref="T:System.String"/> containing the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            service attribute with the specified ID,
            using the specified natural language.
            </summary>
            -
            <remarks>
            <para>As noted in the documentation on this class, string are defined in 
            an odd manner, and the multi-language strings defined in the base SDP 
            specification are defined in a very very odd manner.  The natural language and the 
            string&#x2019;s encoding are not included in the element, but instead are 
            defined in a separate element, and the ID of the string attribute is 
            modified.  This pair is present for each natural language.
            </para>
            <para>This method is provided to simplify accessing those strings, given 
            the Language attribute it should use it to find and decode the string.
            If the primary Language attribute is to be used, then use the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId)"/> 
            method that takes only the id parameter.
            </para>
            </remarks>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="language">
            Which multi-language version of the string attribute to locate.
            </param>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the encoding 
            specified in the given <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </exception>
            -
            <example>
            C#:
            <code lang="C#">
            LanguageBaseItem primaryLang = record.GetPrimaryLanguageBaseItem();
            if (primaryLang == null) {
              Console.WriteLine("Primary multi-language not present, would have to guess the string's encoding.");
              return;
            }
            try {
              String sn = record.GetMultiLanguageStringAttributeById(UniversalAttributeId.ServiceName, primaryLang);
              Console.WriteLine("ServiceName: " + sn);
            } catch (KeyNotFoundException) {
              Console.WriteLine("The record has no ServiceName Attribute.");
            }
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetPrimaryMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId)">
            <summary>
            Gets a <see cref="T:System.String"/> containing the value of the 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>
            service attribute with the specified ID,
            using the primary natural language.
            </summary>
            -
            <remarks>
            <para>As noted in the documentation on this class, string are defined in 
            an odd manner, and the multi-language strings defined in the base SDP 
            specification are defined in a very very odd manner.  The natural language and the 
            string&#x2019;s encoding are not included in the element, but instead are 
            defined in a separate element, and the ID of the string attribute is 
            modified.  This pair is present for each natural language.
            </para>
            <para>This method is provided to simplify accessing those strings, it will 
            find the primary Language attribute and use it to find and decode the string.
            And if there is no primary Language attribute, which is the case in many 
            of the records one sees on mobile phones, it will attempt the operation 
            assuming the string is encoded in UTF-8 (or ASCII).
            </para>
            </remarks>
            -
            <param name="id">The id of the service attribute to locate, as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            -
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            There is no attribute with the given Id in the record.
            Throws <see cref="T:System.ArgumentException"/> in NETCFv1
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The service element is not of type 
            <see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.TextString"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            If the value in the service element is not a valid string in the encoding 
            specified in the given <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            </exception>
            -
            <example>
            C#:
            <code lang="C#">
            try {
              String sn = record.GetMultiLanguageStringAttributeById(UniversalAttributeId.ServiceName);
              Console.WriteLine("ServiceName: " + sn);
            } catch (KeyNotFoundException) {
              Console.WriteLine("The record has no ServiceName Attribute.");
            }
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetLanguageBaseList">
            <summary>
            Gets the list of LanguageBaseAttributeId items in the service record.
            </summary>
            -
            <remarks>
            See also <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>.
            </remarks>
            -
            <returns>
            An array of <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>.
            An array of length zero is returned if the service record contains no such attribute.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetPrimaryLanguageBaseItem"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetPrimaryLanguageBaseItem">
            <summary>
            Gets the primary LanguageBaseAttributeId item in the service record.
            </summary>
            -
            <remarks>
            For instance, can be used with methods 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetMultiLanguageStringAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>,
            and <see cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetAttributeById(InTheHand.Net.Bluetooth.ServiceAttributeId,InTheHand.Net.Bluetooth.LanguageBaseItem)"/>
            etc.  See example code in the first.
            </remarks>
            -
            <returns>
            A <see cref="T:InTheHand.Net.Bluetooth.LanguageBaseItem"/>, or null
            if the service record contains no such attribute, or 
            no primary language item (one with Base Id 0x0100) is included.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.GetLanguageBaseList"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.GetEnumerator">
            <summary>
            Gets an enumerator that can be used to navigate through the record's 
            list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
            -
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            of type <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </returns>
            -
            <example>
            In C#:
            <code lang="C#">
            foreach (ServiceAttribute curAttr in record) {
               if (curAttr.Id == UniversalAttributeId.ProtocolDescriptorList) {
               ...
            }
            </code>
            In Visual Basic:
            <code lang="VB.NET">
            For Each curAttr As ServiceAttribute In record
               If curAttr.Id = UniversalAttributeId.ProtocolDescriptorList Then
               ...
            Next
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that can be used to navigate through the record's 
            list of <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.SourceBytes">
            <summary>
            Get the raw byte array from which the record was parsed.
            </summary>
            -
            <remarks>
            <para>A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> can be created either by manually building new 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s holding new 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>s, or it can be created
            by <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordParser"/> parsing an array
            of bytes read from another machine by e.g. 
            <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>.
            In that case this method returns that source byte array.
            </para>
            <para>To creates a Service Record byte array from the contained
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>s use
            <see cref="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.ToByteArray"/> or <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordCreator"/>.
            </para>
            </remarks>
            -
            <value>
            An array of <see cref="T:System.Byte"/>, or <see langword="null"/> if
            the record was not created by parsing a raw record.
            </value>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.ToByteArray"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.ToByteArray">
            <summary>
            Return the byte array representing the service record.
            </summary>
            -
            <remarks>The byte array content is created dynamically from the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> instance using
            the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordCreator"/> class.
            </remarks>
            -
            <returns>The result as an array of <see cref="T:System.Byte"/>.
            </returns>
            -
            <seealso cref="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.SourceBytes"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.ErrorMsgNotSeq">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.ErrorMsgNoAttributeWithId">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecord.ErrorMsgListContainsNotAttribute">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder">
            <summary>
            Provides a simple way to build a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>, 
            including ServiceClassIds and ServiceNames attributes etc.
            </summary>
            -
            <remarks>
            <para>The service&#x2019;s Class Id can be set with the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.Guid)"/>/<see cref="M:InTheHand.Net.Bluetooth.ServiceRecordBuilder.AddServiceClass(System.UInt16)"/>/etc
            methods, the protocol stack set with the <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ProtocolType"/>
            property (default RFCOMM), and the Service Name set with the 
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordBuilder.ServiceName"/>
            property.  Other properties and methods exist for controlling the more advanced 
            attributes.
            </para>
            <para>Adding the standard text-string attributes (ServiceName etc) is normally quite
            difficult due to the very baroque manner of specifying these strings&#x2019; character 
            encoding and natural language.  The builder handles all the complexity internally; 
            the strings are written in UTF-8 encoding and marked as 'English' language.
            </para>
            </remarks>
            -
            <example>
            <code>
            ServiceRecordBuilder bldr = new ServiceRecordBuilder();
            bldr.AddServiceClass(BluetoothService.SerialPort);
            bldr.ServiceName = "Alan's SPP service";
            //
            ServiceRecord rcd = bldr.ServiceRecord;
            </code>
            
            <code>
            ServiceRecordBuilder bldr = new ServiceRecordBuilder();
            bldr.ProtocolType = BluetoothProtocolDescriptorType.GeneralObex;
            bldr.AddServiceClass(BluetoothService.ObexFileTransfer);
            bldr.ServiceName = "Alan's FTP service";
            //
            ServiceRecord rcd = bldr.ServiceRecord;
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.#ctor">
            <summary>
            Create a new instance of the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.ServiceRecord">
            <summary>
            Gets the <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> instance 
            constructed by the specified <see cref="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder"/> instance.
            </summary>
            -
            <value>
            A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> that contains 
            the URI constructed by the <see cref="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder"/> .
            </value>
            -
            <exception cref="T:System.InvalidOperationException">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> 
            created by the <see cref="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder"/> properties is invalid.
            For instance, if duplicates attributes are disallowed but duplicates are 
            present.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.ReportIfDuplicates(System.Collections.Generic.List{InTheHand.Net.Bluetooth.Sdp.ServiceAttribute},System.Boolean)">
            <param name="list">The list to check for duplicates.
            </param>
            <param name="storedList"><c>true</c> if checking a previously stored list 
            of attributes, and <c>false</c> if checking a immediate addition of an 
            attribute. Thus throws <c>InvalidOperationException</c> and 
            <c>ArgumentException</c> respectively.
            </param>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.ServiceName">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceName"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.ProviderName">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProviderName"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.ServiceDescription">
            <summary>
            Get or set a value for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceDescription"/> 
            attribute.
            </summary>
            -
            <remarks><para>When present, a corresponding <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.LanguageBaseAttributeIdList"/> 
            attribute will be added too.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.ProtocolType">
            <summary>
            Get or set which type of element will be added for the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/> 
            attribute.
            </summary>
            -
            <value>An instance of the <see cref="T:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType"/> 
            enumeration.
            </value>
            -
            <remarks><para>Supported type are the following:
            </para>
            <list type="bullet">
            <item><term>None</term>
            <description>No PDL attribute will be added.</description>
            </item>
            <item><term>Rfcomm</term>
            <description>A standard RFCOMM element will be added.</description>
            </item>
            <item><term>Goep</term>
            <description>A standard GOEP (OBEX) element will be added.</description>
            </item>
            <item><term>L2Cap</term>
            <description>A standard L2CAP element will be added.</description>
            </item>
            </list>
            <para>The default is <see cref="F:InTheHand.Net.Bluetooth.BluetoothProtocolDescriptorType.Rfcomm"/>.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddServiceClass(System.Guid)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid128">A <see cref="T:System.Guid"/> containing a 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddServiceClass(System.UInt16)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid16">A <see cref="T:System.UInt16"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddServiceClass(System.UInt32)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid32">A <see cref="T:System.UInt32"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddServiceClass(System.Int32)">
            <summary>
            Add a Service Class Id.
            </summary>
            -
            <remarks>
            <para>Multiple class ids can be added, and they will be written to the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ServiceClassIdList"/>
            attribute in the order in which they were set.
            </para>
            </remarks>
            -
            <param name="uuid16or32">A <see cref="T:System.Int32"/> containing a short-form 
            UUID for the advertised service.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddBluetoothProfileDescriptor(System.Guid,System.Byte,System.Byte)">
            <summary>
            Add a <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.BluetoothProfileDescriptorList"/> 
            element.
            </summary>
            -
            <param name="classId">The Service Class Id of the Bluetooth profile, 
            as a <see cref="T:System.Guid"/>
            </param>
            <param name="majorVersion">The major version number, as a <see cref="T:System.Byte"/>.
            </param>
            <param name="minorVersion">The minor version number, as a <see cref="T:System.Byte"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddCustomAttributes(System.Collections.Generic.IEnumerable{InTheHand.Net.Bluetooth.Sdp.ServiceAttribute})">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> returning 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instances.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddCustomAttributes(System.Collections.IEnumerable)">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an 
            <see cref="T:System.Collections.IEnumerable"/> returning 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instances.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddCustomAttributes(InTheHand.Net.Bluetooth.Sdp.ServiceAttribute[])">
            <summary>
            Add a set of custom attribute.
            </summary>
            -
            <param name="serviceAttributes">A set of attributes as an array of 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddCustomAttribute(InTheHand.Net.Bluetooth.Sdp.ServiceAttribute)">
            <overloads>
            Add a custom attribute.
            </overloads>
            -
            <summary>
            Add a custom attribute from a given <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/>
            </summary>
            -
            <param name="serviceAttribute">An attribute as a 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceAttribute"/> instance.
            </param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddCustomAttribute(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,InTheHand.Net.Bluetooth.Sdp.ElementType,System.Object)">
            <summary>
            Add a custom attribute of simple type.
            </summary>
            -
            <remarks>
            <para>If the <paramref name="elementType"/> is a numerical type
            then this is equivalent to using
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
            otherwise the value is used directly in creating the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </para>
            </remarks>
            -
            <param name="id">The Attribute Id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceAttributeId"/>.</param>
            <param name="elementType">The type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.</param>
            <param name="value">The value for the new element.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.AddCustomAttribute(System.UInt16,InTheHand.Net.Bluetooth.Sdp.ElementType,System.Object)">
            <summary>
            Add a custom attribute of simple type.
            </summary>
            -
            <remarks>
            <para>If the <paramref name="elementType"/> is a numerical type
            then this is equivalent to using
            <see cref="M:InTheHand.Net.Bluetooth.ServiceElement.CreateNumericalServiceElement(InTheHand.Net.Bluetooth.ElementType,System.Object)"/>
            otherwise the value is used directly in creating the
            <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.
            </para>
            </remarks>
            -
            <param name="id">The Attribute Id as a <see cref="T:System.UInt16"/>.</param>
            <param name="elementType">The type of the element as an <see cref="T:InTheHand.Net.Bluetooth.ElementType"/>.</param>
            <param name="value">The value for the new element.</param>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordBuilder.FromJsr82ServerUri(System.String)">
             <summary>
             Converts a Java JSR 82 Bluetooth server URL into a 
             <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> instance.
             </summary>
             -
             <remarks>
             <note type="caution">The <c>authenticate</c> and <c>encrypt</c> and any 
             related parameters are completely disregarded.  When using with 
             <see cref="T:InTheHand.Net.Sockets.BluetoothListener"/> you must take 
             care to set the required security requirements on it directly.
             </note>
             This method is intended to read the Service Record (SDP) related items only; 
             in particular the Service Class ID UUID and Service Name parameters.
             It supports only the <c>btspp</c> and <c>btObex</c> schemes and only for
             server-side use only.  For instance
            <code lang="none">btspp://localhost:3B9FA89520078C303355AAA694238F08;name=FooBar</code>
             and
            <code lang="none">btgoep://localhost:3B9FA89520078C303355AAA694238F08</code>
             There is no suppport for e.g.
            <code lang="none">btl2cap://localhost:3B9FA89520078C303355AAA694238F08;name=Aserv</code>
             as the library supports only RFCOMM connections currently.
             </remarks>
             -
             <param name="url">A server-side JSR 82 URL in one of the supported forms.
             </param>
             -
             <returns>A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordBuilder"/> 
             initialised with the supported components of the supplied JSR 82 URL.
             </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator">
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.Sdp.ServiceRecord,System.Byte[])">
            <overloads>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </overloads>
            -
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object,
            into the specified byte array.
            </summary>
            -
            <remarks>
            See the other overload <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.ServiceRecord)"/>
            </remarks>
            -
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            <param name="buffer">An array of <see cref="T:System.Byte"/> for the record
            to be written to.
            </param>
            -
            <exception cref="T:System.ArgumentOutOfRangeException">
            The record bytes are longer that the supplied byte array buffer.
            </exception>
            -
            <returns>The length of the record in the array of <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.WriteAttribute(InTheHand.Net.Bluetooth.Sdp.ServiceAttribute,System.Byte[],System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Creates a Service Record byte array from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
            -
            <remarks>
            <para>The only oddity (as with parsing) is with the <c>TextString</c>
            type.  The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/> can
            either hold the string already encoded to its array of bytes or an 
            <see cref="T:System.String"/>.  In the latter case we will always simply 
            encode the string to an array of bytes using encoding 
            <see cref="P:System.Text.Encoding.UTF8"/>.
            </para>
            <para>Currently any UUIDs in the record are written out in the form supplied,
            we should probably write a &#x2018;short-form&#x2019; equivalent if its
            a &#x2018;Bluetooth-based&#x2019; UUID e.g. <c>Uuid128</c> as <c>Uuid16</c>.
            </para>
            </remarks>
            -
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            -
            <returns>An array of <see cref="T:System.Byte"/> containing the resultant
            record bytes.  The length of the array is the length of the record bytes.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.CreateAttrId(InTheHand.Net.Bluetooth.AttributeIds.ServiceAttributeId,System.Byte[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.CreateElement(InTheHand.Net.Bluetooth.Sdp.ServiceElement,System.Byte[],System.Int32)">
            <summary>
            Create the element in the buffer starting at offset, and return its totalLength.
            </summary>
            <param name="element">The element to create.
            </param>
            <param name="buf">The byte array to write the encoded element to.
            </param>
            <param name="offset">The place to start writing in <paramref name="buf"/>.
            </param>
            
            <returns>The total length of the encoded element written to the buffer
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.WriteVariableLength(InTheHand.Net.Bluetooth.Sdp.ServiceElement,System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.WriteFixedLength(InTheHand.Net.Bluetooth.Sdp.ServiceElement,System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.MakeVariableLengthHeader(System.Byte[],System.Int32,InTheHand.Net.Bluetooth.Sdp.ElementTypeDescriptor,InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.CompleteHeaderWrite(InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState,System.Byte[],System.Int32,System.Int32@)">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState.HeaderOffset">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState.Etd">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState.SizeIndex">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.HeaderWriteState.HeaderLength">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordCreator.ErrorMsgSupportOnlyLength255">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper">
            <summary>
            Some useful methods for working with a SDP <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            including creating and accessing the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            for an RFCOMM service.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.GetRfcommChannelElement(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Reads the RFCOMM Channel Number element from the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            holding the Channel Number.
            or <see langword="null"/> if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.GetL2CapChannelElement(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Reads the L2CAP Channel Number element from the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>
            holding the Channel Number.
            or <see langword="null"/> if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.GetRfcommChannelNumber(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Reads the RFCOMM Channel Number value from the service record,
            or returns -1 if the element is not present.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The Channel Number as an unsigned byte cast to an Int32, 
            or -1 if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.GetL2CapChannelNumber(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Reads the L2CAP Channel Number value from the service record,
            or returns -1 if the element is not present.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            to search for the element.
            </param>
            -
            <returns>The PSM number as an uint16 cast to an Int32, 
            or -1 if at the <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.SetRfcommChannelNumber(InTheHand.Net.Bluetooth.Sdp.ServiceRecord,System.Byte)">
            <summary>
            Sets the RFCOMM Channel Number value in the service record.
            </summary>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            in which to set the RFCOMM Channel number.
            </param>
            <param name="channelNumber">The Channel number to set in the record.
            </param>
            -
            <exception cref="T:System.InvalidOperationException">The
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.SetL2CapPsmNumber(InTheHand.Net.Bluetooth.Sdp.ServiceRecord,System.Int32)">
            <summary>
            Sets the RFCOMM Channel Number value in the service record.
            </summary>
            -
            <remarks>
            <para>Note: We use an <see cref="T:System.Int32"/> for the
            <paramref name="psm"/> parameter as its natural type <see cref="T:System.UInt16"/> 
            in not usable in CLS Compliant interfaces.
            </para>
            </remarks>
            -
            <param name="record">The <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            in which to set the L2CAP PSM value.
            </param>
            <param name="psm">The PSM value to set in the record.
            Note that although the parameter is of type <see cref="T:System.Int32"/> 
            the value must actually be in the range of a <see cref="T:System.UInt16"/>,
            see the remarks for more information.
            </param>
            -
            <exception cref="T:System.InvalidOperationException">The
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute is missing or contains invalid elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The PSM must fit in a 16-bit unsigned integer.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.CreateL2CapProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an L2CAP service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
                  UInt16 = 0      -- The L2CAP PSM Number.
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.CreateRfcommProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an RFCOMM service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
               ElementSequence
                  Uuid16 = RFCOMM
                  UInt8  = 0      -- The RFCOMM Channel Number.
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.CreateGoepProtocolDescriptorList">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an GOEP (i.e. OBEX) service
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
               ElementSequence
                  Uuid16 = RFCOMM
                  UInt8  = 0      -- The RFCOMM Channel Number.
               ElementSequence
                  Uuid16 = GOEP
            </code>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordHelper.CreateL2CapProtocolDescriptorListWithUpperLayers(InTheHand.Net.Bluetooth.Sdp.ServiceElement[])">
            <summary>
            Creates the data element for the 
            <see cref="F:InTheHand.Net.Bluetooth.AttributeIds.UniversalAttributeId.ProtocolDescriptorList"/>
            attribute in an L2CAP service,
            with upper layer entries.
            </summary>
            -
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.ServiceElement"/>.</returns>
            -
            <remarks>Thus is the following structure at the first layer:
            <code lang="none">
            ElementSequence
               ElementSequence
                  Uuid16 = L2CAP
                  UInt16 = 0      -- The L2CAP PSM Number.
            </code>
            One can add layers above that; remember that all layers are formed
            of an ElementSequence.  See the example below.
            </remarks>
            -
            <example>
            <code>
            var netProtoList = new ServiceElement(ElementType.ElementSequence,
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0800),
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0806)
                );
            var layer1 = new ServiceElement(ElementType.ElementSequence,
                new ServiceElement(ElementType.Uuid16, Uuid16_BnepProto),
                ServiceElement.CreateNumericalServiceElement(ElementType.UInt16, 0x0100), //v1.0
                netProtoList
                );
            ServiceElement element = ServiceRecordHelper.CreateL2CapProtocolDescriptorListWithUpperLayers(
                layer1);
            </code>
            </example>
            -
            <param name="upperLayers">The list of upper layer elements, one per layer.
            As an array.
            </param>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser">
            <summary>
            Parses an array of bytes into the contained SDP 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            See the
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            methods for more information.
            </remarks>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.SkipUnhandledElementTypes">
            <summary>
            Gets or set whether the parser will attempt to skip any unknown element
            type rather than producing an error.
            </summary>
            -
            <remarks>
            <para>
            An element type is added instead with 
            <c>ElementType.</c><see cref="F:InTheHand.Net.Bluetooth.ElementType.Unknown"/> 
            and <c>ElementTypeDescriptor.</c><see cref="F:InTheHand.Net.Bluetooth.ElementTypeDescriptor.Unknown"/>.
            </para>
            </remarks>
        </member>
        <member name="P:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.LazyUrlCreation">
            <summary>
            Gets or sets whether any URL elements will be converted to 
            <see cref="T:System.Uri"/> instances at parse time, or left as raw byte arrays.
            </summary>
            -
            <remarks><para>
            This is useful when the URL element is badly formatted and thus the
            parser will reject the record, setting this property to <c>true</c> will
            allow the parse to complete without attempting to decode the URL value.
            </para>
            <para>When <c>true</c> the value is stored as a array of bytes, when
            <c>false</c> it is stored as a <see cref="T:System.String"/>;
            however in earlier versions it was stored as <see cref="T:System.Uri"/>,
            and since there was often invalid content on devices (e.g. iPhone)
            this often failed.
            </para>
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.Parse(System.Byte[])">
            <summary>
            Parses an array of bytes into its contained 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            See <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            for more information.
            </remarks>
            -
            <param name="buffer">A byte array containing the encoded Service Record.
            </param>
            <returns>The new <see cref="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecord"/> parsed from the byte array.
            </returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an array of bytes into its contained 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>.
            </summary>
            -
            <remarks>
            <para>If the record contains any element type not supported by the parser
            it will throw <see cref="T:System.NotImplementedException"/>. The
            only element types defined by SDP in v2.0 that are not currently implemented 
            are 64- and 128-bit integers.  Of course any types defined in a later 
            version will also throw this.  This behaviour can be changed with the
            <see cref="P:InTheHand.Net.Bluetooth.ServiceRecordParser.SkipUnhandledElementTypes"/> 
            property.
            </para>
            </remarks>
            -
            <param name="buffer">A byte array containing a Service Record.
            </param>
            <param name="offset">The position in the data buffer at which to
            begin parsing the Service Record.
            </param>
            <param name="length">The length of the Service Record in the byte array.
            </param>
            <returns>The Service Record parse from the byte array.
            </returns>
            -
            <exception cref="T:System.Net.ProtocolViolationException">
            The record contains invalid content.
            </exception>
            <exception cref="T:System.NotImplementedException">
            The record contains an element type not supported by the parser.
            </exception>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.Parse(System.Byte[])"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecord.CreateServiceRecordFromBytes(System.Byte[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.SplitSearchAttributeResult(System.Byte[])">
            <summary>
            Split a sequence of records into the component records.
            </summary>
            -
            <remarks>
            <para>The Bluetooth SDP operation ServiceSearchAttribute returns its 
            result as a &#x201C;data element sequence where each element in turn is 
            a data element sequence representing an attribute list.&#x201D;  This
            method split that sequence into the individual attribute lists.
            </para>
            <para>On CE/Windows Mobile the result of a record lookup is in this form
            so <see cref="M:InTheHand.Net.Sockets.BluetoothDeviceInfo.GetServiceRecords(System.Guid)"/>
            etc use this method to split the result into is constituent records.
            </para>
            </remarks>
            -
            <param name="multiRecord">A byte array holding the 
            &#x201C;data element sequence where each element in turn is 
            a data element sequence representing an attribute list.&#x201D;
            </param>
            -
            <returns>An array of byte arrays where each holds a SDP record
            (a &#x201C;data element sequence representing an attribute list.&#x201D;).
            If the input was zero length or empty then a zero length array is returned.
            </returns>
            -
            <exception cref="T:System.ArgumentNullException">
            <paramref name="multiRecord"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ParseContent(System.Boolean,System.Boolean,System.Byte[],System.Int32,System.Int32,System.Int32@,InTheHand.Net.Bluetooth.Sdp.ElementTypeDescriptor,InTheHand.Net.Bluetooth.Sdp.SizeIndex,System.Int32,System.Int32)">
            <summary>
            For use when the content of the element is in an array
            i.e. the stack parses the element structure and returns the values in byte arrays.
            </summary>
            -
            <param name="networkOrderInteger">Whether the stack uses network order
            for UnsignedInteger and TwosComplementInteger elements (as used in the SDP format)
            or instead that the numerical values are in host order
            in the byte array.
            </param>
            <param name="networkOrderUuid">Whether the stack uses network order
            for Uuid elements (as used in the SDP format) 
            or instead that the numerical values are in host order
            in the byte array.
            </param>
            <param name="buffer">The byte array containing the SDP value.
            </param>
            <param name="offset">(?Always zero).
            </param>
            <param name="length">The length of the byte array.
            (Always equals <paramref name="contentLength"/>).
            </param>
            <param name="_readLength">
            </param>
            <param name="etd">The Element Type.
            </param>
            <param name="dbgSizeIndex">(Not used).
            </param>
            <param name="contentLength">The size of the value.
            </param>
            <param name="contentOffset">(?Always zero).
            </param>
            -
            <returns>
            </returns>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.GetElementLength(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.Sdp.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.Sdp.SizeIndex@)">
            <summary>
            Split a header byte into its <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> and 
            <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> parts.
            </summary>
            <remarks>
            The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> returned is not checked to be a 
            known value.
            </remarks>
            -
            <param name="headerByte">The byte from the header.
            </param>
            <param name="etd">The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>
            value from the header byte.
            </param>
            <param name="sizeIndex">The <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>
            value from a header byte.
            </param>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)">
            <summary>
            Extract the <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> value from a header byte.
            </summary>
            <remarks>
            The <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/> returned is not checked to be a 
            known value.
            </remarks>
            -
            <param name="headerByte">The byte from the header.
            </param>
            -
            <returns>The value as a <see cref="T:InTheHand.Net.Bluetooth.ElementTypeDescriptor"/>.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetSizeIndex(System.Byte)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.GetSizeIndex(System.Byte)">
            <summary>
            Extract the <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/> field from a header byte.
            </summary>
            -
            <param name="headerByte">The byte from the header.
            </param>
            -
            <returns>The value as a <see cref="T:InTheHand.Net.Bluetooth.SizeIndex"/>.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.SplitHeaderByte(System.Byte,InTheHand.Net.Bluetooth.ElementTypeDescriptor@,InTheHand.Net.Bluetooth.SizeIndex@)"/>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordParser.GetElementTypeDescriptor(System.Byte)"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ElementTypeDescriptorOffset">
            <summary>
            Bit offset of the ElementTypeDescriptor field in a header byte.
            </summary>
            <remarks>
            The header byte has two parts: five bits of ElementTypeDescriptor and
            three bits of Size Index.
            </remarks>
            <seealso cref="F:InTheHand.Net.Bluetooth.ServiceRecordParser.SizeIndexMask"/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.SizeIndexMask">
            <summary>
            Mask for the SizeIndex field in a header byte.
            </summary>
            <remarks>
            The header byte has two parts: five bits of ElementTypeDescriptor and
            three bits of Size Index, upper and lower respectively.
            </remarks>
            <seealso cref="F:InTheHand.Net.Bluetooth.ServiceRecordParser.ElementTypeDescriptorOffset"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.TypeMatchesEtd(InTheHand.Net.Bluetooth.Sdp.ElementTypeDescriptor,InTheHand.Net.Bluetooth.Sdp.ElementType)">
            <exclude/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.GetEtdForType(InTheHand.Net.Bluetooth.Sdp.ElementType)">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgFormatUnknownType">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgFormatTypeNotTypeDSubtype">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgSizeIndexNotSuitTypeD">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgServiceRecordBytesZeroLength">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgFormatInvalidHeaderBytes">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgFormatTruncated">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgFormatNotSupportFull32bitSized">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgTypeNotAsExpected">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgTopElementNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgMultiSeqChildElementNotSequence">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgSequenceOverruns">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgElementOverrunsBuffer_WithLengths">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgElementOverrunsBuffer">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgElementOverrunsBufferPrefix">
            <exclude/>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Sdp.ServiceRecordParser.ErrorMsgAttributePairFirstMustUint16">
            <exclude/>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordUtilities">
            <summary>
            Utilities method working on SDP <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>s, for instance to
            produce a 'dump' of the record's contents.
            </summary>
            -
            <remarks>
            This class produces output like the following:
            <code lang="none">
            AttrId: 0x0000 -- ServiceRecordHandle
            UInt32: 0x0
            
            AttrId: 0x0001 -- ServiceClassIdList
            ElementSequence
                Uuid16: 0x1000 -- ServiceDiscoveryServer
            
            AttrId: 0x0004 -- ProtocolDescriptorList
            ElementSequence
                ElementSequence
                    Uuid16: 0x100 -- L2CapProtocol
                    UInt16: 0x1
                ElementSequence
                    Uuid16: 0x1 -- SdpProtocol
            ( ( L2Cap, PSM=Sdp ), ( Sdp ) )
            
            AttrId: 0x0005 -- BrowseGroupList
            ElementSequence
                Uuid16: 0x1002 -- PublicBrowseGroup
            
            AttrId: 0x0006 -- LanguageBaseAttributeIdList
            ElementSequence
                UInt16: 0x656E
                UInt16: 0x6A
                UInt16: 0x100
            
            AttrId: 0x0100 -- ServiceName
            TextString: [en] 'Service Discovery'
            
            AttrId: 0x0101 -- ServiceDescription
            TextString: [en] 'Publishes services to remote devices'
            
            AttrId: 0x0102 -- ProviderName
            TextString: [en] 'Microsoft'
            
            AttrId: 0x0200 -- VersionNumberList
            ElementSequence
                UInt16: 0x100
            
            AttrId: 0x0201 -- ServiceDatabaseState
            UInt32: 0x1
            </code>
            The Service Class Id names and Attribute Id names are looked up using 
            <see cref="M:InTheHand.Net.Bluetooth.BluetoothService.GetName(System.Guid)"/>/etc and
            <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/>
            respectively.
            </remarks>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordUtilities.DumpRaw(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <overloads>
            Produces a raw 'dump' of the given record, not including attribute names etc.
            </overloads>
            -
            <summary>
            Gets a string containing a raw 'dump' of the given record, not including attribute names etc.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <returns>A <see cref="T:System.String"/> containing the 'dump' text.</returns>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordUtilities.DumpRaw(System.IO.TextWriter,InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Produce a raw 'dump' of the given record, not including attribute names etc, to the given
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> where the 'dump'
            text is to be written.</param>
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.DumpRaw(InTheHand.Net.Bluetooth.ServiceRecord)"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordUtilities.Dump(InTheHand.Net.Bluetooth.Sdp.ServiceRecord,System.Type[])">
            <overloads>
            Produces a 'dump' of the given record, including attribute names etc.
            </overloads>
            --
            <summary>
            Gets a <see cref="T:System.String"/> containing a 'dump' of the given record, including attribute names etc.
            </summary>
            -
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <param name="attributeIdEnumDefiningTypes">
            An optional array of <see cref="T:System.Type"/> specifing a set of Ids 
            for the attributes contained in this record.  See the 
            <see cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/> 
            overload for more information.
            </param>
            -
            <returns>A <see cref="T:System.String"/> containing the 'dump' text.</returns>
            -
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordUtilities.Dump(System.IO.TextWriter,InTheHand.Net.Bluetooth.Sdp.ServiceRecord,System.Type[])">
            <summary>
            Produce a 'dump' of the given record, including attribute names etc to the given
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            -
            <remarks>
            <para>The system has built-in a set of mappings from Service Class to 
            its Attribute IDs. This is supplied by the 
            <see cref="T:InTheHand.Net.Bluetooth.MapServiceClassToAttributeIdList"/> class,
            and contains the Attribute IDs defined in the base SDP specification as 
            well as in Bluetooth Profiles specification e.g. ObjectPushProfile, Headset,
            Panu, etc.
            If however the record being decoded is a custom one then a set of extra 
            Attribute Id definitions can be supplied in the 
            <paramref name="attributeIdEnumDefiningTypes"/> parameter.
            The Attribute IDs for a particular Service Class 
            should be defined in a static class and the set of such classes should 
            be passed as their <see cref="T:System.Type"/> object. e.g.
            <code lang="C#">
            static class FooAttributeId
            {
                public const ServiceAttributeId BarName = (ServiceAttributeId)0x0300;
            }
            
            &#x2026;
                ServiceRecordUtilities.Dump(writer, myRecord, typeof(FooAttributeId));
            &#x2026;
            </code>
            </para>
            </remarks>
            -
            <param name="writer">A <see cref="T:System.IO.TextWriter"/> where the 'dump'
            text is to be written.</param>
            <param name="record">A <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> to be dumped.</param>
            <param name="attributeIdEnumDefiningTypes">
            An optional array of <see cref="T:System.Type"/> specifing a set of Ids 
            for the attributes contained in this record.  See the 
            </param>
            <seealso cref="M:InTheHand.Net.Bluetooth.ServiceRecordUtilities.Dump(InTheHand.Net.Bluetooth.ServiceRecord,System.Type[])"/>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordUtilities.GuidToHackProtocolId(System.Guid,System.String@)">
            <summary>
            Attempt to get the name of the protocol,
            and optionally it's enum id if we handle it specially.
            </summary>
            -
            <param name="protocolGuid">The input.
            </param>
            <param name="protoStr">The protocol's name if known, or its
            Guid.ToString if not.
            We handle some explicitly, and otherwise we see if there's a
            matching value in BluetoothService that has its name suffixed "Protocol".
            </param>
            -
            <returns>The id as a <see cref="T:InTheHand.Net.Bluetooth.ServiceRecordUtilities.HackProtocolId"/>.
            We handle some explicitly,
            otherwise we see if its a UUID16 and convert it automatically,
            finally if neither we return <c>zero</c>.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Sdp.ServiceRecordXmlCreator">
            <summary>
            Creates an XML representation of a Service Record from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
        </member>
        <member name="M:InTheHand.Net.Bluetooth.Sdp.ServiceRecordXmlCreator.CreateServiceRecord(InTheHand.Net.Bluetooth.Sdp.ServiceRecord)">
            <summary>
            Creates an XML representation of a Service Record from the given 
            <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/> object.
            </summary>
            <param name="record">An instance of <see cref="T:InTheHand.Net.Bluetooth.ServiceRecord"/>
            containing the record to be created.
            </param>
            <returns>
            A <see cref="T:System.Xml.Linq.XDocument"/> which represents the XML representation of the Service
            Record.
            </returns>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.ServiceClass">
            <summary>
            Class of Service flags as assigned in the Bluetooth specifications.
            </summary>
            -
            <remarks>
            <para>Is returned by the property <see
            cref="P:InTheHand.Net.Bluetooth.ClassOfDevice.Service">ClassOfDevice.Service</see>.
            </para>
            <para>Defined in Bluetooth Specifications <see href="http://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm"/>.
            </para>
            </remarks>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.None">
            <summary>
            No service class bits set.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Telephony">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.ObjectTransfer">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Capturing">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Rendering">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Network">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.Positioning">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.ServiceClass.LimitedDiscoverableMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod">
            <summary>
            The BluetoothAuthenticationMethod enumeration defines the supported
            authentication types during device pairing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Legacy">
            <summary>
            The Bluetooth device supports authentication via a PIN.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.OutOfBand">
            <summary>
            The Bluetooth device supports authentication via out-of-band data.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.NumericComparison">
            <summary>
            The Bluetooth device supports authentication via numeric comparison.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.PasskeyNotification">
            <summary>
            The Bluetooth device supports authentication via passkey notification.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationMethod.Passkey">
            <summary>
            The Bluetooth device supports authentication via passkey.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements">
            <summary>
            The AUTHENTICATION_REQUIREMENTS enumeration specifies the 'Man in the Middle' protection required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequired">
            <summary>
            Protection against a "Man in the Middle" attack is not required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequired">
            <summary>
            Protection against a "Man in the Middle" attack is required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequiredBonding">
            <summary>
            Protection against a "Man in the Middle" attack is not required for bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequiredBonding">
            <summary>
            Protection against a "Man in the Middle" attack is required for bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotRequiredGeneralBonding">
            <summary>
            Protection against a "Man in the Middle" attack is not required for General Bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionRequiredGeneralBonding">
            <summary>
            Protection against a "Man in the Middle" attack is required for General Bonding.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothAuthenticationRequirements.MITMProtectionNotDefined">
            <summary>
            Protection against "Man in the Middle" attack is not defined.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.BluetoothIoCapability">
            <summary>
            Defines the input/output capabilities of a Bluetooth Device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.DisplayOnly">
            <summary>
            The Bluetooth device is capable of output via display only.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.DisplayYesNo">
            <summary>
            The Bluetooth device is capable of output via a display, 
            and has the additional capability to presenting a yes/no question to the user.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.KeyboardOnly">
            <summary>
            The Bluetooth device is capable of input via keyboard.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.NoInputNoOutput">
            <summary>
            The Bluetooth device is not capable of input/output.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.BluetoothIoCapability.Undefined">
            <summary>
            The input/output capabilities for the Bluetooth device are undefined.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.GET_LOCAL_INFO">
            <summary>
            Input:  none
            Output:  BTH_LOCAL_RADIO_INFO
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.GET_RADIO_INFO">
            <summary>
            Input:  BTH_ADDR
            Output:  BTH_RADIO_INFO
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.GET_DEVICE_INFO">
             <summary>
             use this ioctl to get a list of cached discovered devices in the port driver.
            
             Input: None
             Output: BTH_DEVICE_INFO_LIST
             </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.DISCONNECT_DEVICE">
            <summary>
            Input:  BTH_ADDR
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.GET_DEVICE_RSSI">
            <summary>
            Input:   BTH_GET_DEVICE_RSSI
            Output:  ULONG
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.EIR_GET_RECORDS">
            <summary>
            Input:   BTH_EIR_GET_RECORDS
            Output:  UCHAR array, sequence of length + type + data fields triplets.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.EIR_SUBMIT_RECORD">
            <summary>
            Input:  BTH_EIR_SUBMIT_RECORD
            Output  HANDLE
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.EIR_UPDATE_RECORD">
            <summary>
            Input:  BTH_EIR_SUBMIT_RECORD
            Output  None
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.EIR_REMOVE_RECORD">
            <summary>
            Input:   HANDLE
            Output:  None
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.HCI_VENDOR_COMMAND">
            <summary>
            Input:   BTH_VENDOR_SPECIFIC_COMMAND 
            Output:  PVOID
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_CONNECT">
            <summary>
            Input:  BTH_SDP_CONNECT
            Output:  BTH_SDP_CONNECT
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_DISCONNECT">
            <summary>
            Input:  HANDLE_SDP
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_SERVICE_SEARCH">
            <summary>
            Input:  BTH_SDP_SERVICE_SEARCH_REQUEST
            Output:  ULONG * number of handles wanted
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_ATTRIBUTE_SEARCH">
            <summary>
            Input:  BTH_SDP_ATTRIBUTE_SEARCH_REQUEST
            Output:  BTH_SDP_STREAM_RESPONSE or bigger
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_SERVICE_ATTRIBUTE_SEARCH">
            <summary>
            Input:  BTH_SDP_SERVICE_ATTRIBUTE_SEARCH_REQUEST
            Output:  BTH_SDP_STREAM_RESPONSE or bigger
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_SUBMIT_RECORD">
            <summary>
            Input:  raw SDP stream (at least 2 bytes)
            Ouptut: HANDLE_SDP
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_REMOVE_RECORD">
            <summary>
            Input:  HANDLE_SDP
            Output:  none
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.IOCTL_BTH.SDP_SUBMIT_RECORD_WITH_INFO">
            <summary>
            Input:  BTH_SDP_RECORD + raw SDP record
            Output:  HANDLE_SDP
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS">
            <summary>
            The BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS structure contains specific configuration information about the Bluetooth device responding to an authentication request.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.deviceInfo">
            <summary>
            A BLUETOOTH_DEVICE_INFO structure that contains information about a Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.authenticationMethod">
            <summary>
            A BLUETOOTH_AUTHENTICATION_METHOD enumeration that defines the authentication method utilized by the Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.ioCapability">
            <summary>
            A BLUETOOTH_IO_CAPABILITY enumeration that defines the input/output capabilities of the Bluetooth device.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.authenticationRequirements">
            <summary>
            A AUTHENTICATION_REQUIREMENTS specifies the 'Man in the Middle' protection required for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS.Numeric_Value_Passkey">
            <summary>
            A ULONG value used for Numeric Comparison authentication.
            or
            A ULONG value used as the passkey used for authentication.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.Oem">
            <summary>
            OEM-defined device type
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.DevNode">
            <summary>
            Devnode number
            /// </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.Network">
            <summary>
            Network resource
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.DeviceInterface">
            <summary>
            Device interface class
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.DbtDevTyp.Handle">
            <summary>
            File system handle
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_PIN_INFO">
            <summary>
            The BLUETOOTH_PIN_INFO structure contains information used for authentication via PIN.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Bluetooth.Win32.BLUETOOTH_OOB_DATA_INFO">
            <summary>
            The BLUETOOTH_OOB_DATA_INFO structure contains data used to authenticate prior to establishing an Out-of-Band device pairing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.WSAESETSERVICEOP.RNRSERVICE_REGISTER">
            <summary>
            Register the service. For SAP, this means sending out a periodic broadcast.
            This is an NOP for the DNS namespace.
            For persistent data stores, this means updating the address information. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.WSAESETSERVICEOP.RNRSERVICE_DEREGISTER">
            <summary>
             Remove the service from the registry.
             For SAP, this means stop sending out the periodic broadcast.
             This is an NOP for the DNS namespace.
             For persistent data stores this means deleting address information. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.Bluetooth.Win32.WSAESETSERVICEOP.RNRSERVICE_DELETE">
            <summary>
            Delete the service from dynamic name and persistent spaces.
            For services represented by multiple CSADDR_INFO structures (using the SERVICE_MULTIPLE flag), only the specified address will be deleted, and this must match exactly the corresponding CSADDR_INFO structure that was specified when the service was registered 
            </summary>
        </member>
        <member name="T:InTheHand.Net.BluetoothEndPoint">
            <summary>
            Represents a network endpoint as a Bluetooth address and a Service Class Id and/or a port number.
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.#ctor(InTheHand.Net.BluetoothAddress,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the BluetoothEndPoint class with the specified address and service.
            </summary>
            <param name="address">The Bluetooth address of the device.</param>
            <param name="service">The Bluetooth service to use.</param>
            <param name="port">Optional port number.</param>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.AddressFamily">
            <summary>
            Gets the address family of the Bluetooth address.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Address">
            <summary>
            Gets the Bluetooth address of the endpoint.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Service">
            <summary>
            Gets the Bluetooth service to use for the connection.
            </summary>
        </member>
        <member name="P:InTheHand.Net.BluetoothEndPoint.Port">
            <summary>
            Gets the port number (or -1 for any).
            </summary>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an endpoint from a socket address.
            </summary>
            <param name="socketAddress"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.Serialize">
            <summary>
            Serializes endpoint information into a SocketAddress instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.BluetoothEndPoint.ToString">
            <summary>
            Returns the string representation of the BluetoothEndPoint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.SocketAddressExtensions.ToByteArray(System.Net.SocketAddress)">
            <summary>
            Returns the serialized SocketAddress as a raw byte array.
            </summary>
            <param name="sa"></param>
            <returns></returns>
        </member>
    </members>
</doc>
